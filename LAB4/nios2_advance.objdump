
nios2_advance.elf:     file format elf32-littlenios2
nios2_advance.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00008244

Program Header:
    LOAD off    0x00001000 vaddr 0x00008000 paddr 0x00008000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00008020 paddr 0x00008020 align 2**12
         filesz 0x00002b04 memsz 0x00002b04 flags r-x
    LOAD off    0x00003b24 vaddr 0x0000ab24 paddr 0x0000ae04 align 2**12
         filesz 0x000002e0 memsz 0x000002e0 flags rw-
    LOAD off    0x000040e4 vaddr 0x0000b0e4 paddr 0x0000b0e4 align 2**12
         filesz 0x00000000 memsz 0x00000120 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00008000  00008000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000224  00008020  00008020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00002820  00008244  00008244  00001244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       000000c0  0000aa64  0000aa64  00003a64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000002e0  0000ab24  0000ae04  00003b24  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000120  0000b0e4  0000b0e4  000040e4  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  0000b204  0000b204  00003e04  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00003e04  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 000006b8  00000000  00000000  00003e28  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   000086d2  00000000  00000000  000044e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002fb3  00000000  00000000  0000cbb2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00003441  00000000  00000000  0000fb65  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000cd0  00000000  00000000  00012fa8  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001ea3  00000000  00000000  00013c78  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001629  00000000  00000000  00015b1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000060  00000000  00000000  00017144  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000002d0  00000000  00000000  000171a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000190b2  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000190b5  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000190c1  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000190c2  2**0
                  CONTENTS, READONLY
 21 .sysid_hash   00000004  00000000  00000000  000190c3  2**0
                  CONTENTS, READONLY
 22 .sysid_base   00000004  00000000  00000000  000190c7  2**0
                  CONTENTS, READONLY
 23 .sysid_time   00000004  00000000  00000000  000190cb  2**0
                  CONTENTS, READONLY
 24 .stderr_dev   0000000b  00000000  00000000  000190cf  2**0
                  CONTENTS, READONLY
 25 .stdin_dev    0000000b  00000000  00000000  000190da  2**0
                  CONTENTS, READONLY
 26 .stdout_dev   0000000b  00000000  00000000  000190e5  2**0
                  CONTENTS, READONLY
 27 .sopc_system_name 0000000e  00000000  00000000  000190f0  2**0
                  CONTENTS, READONLY
 28 .quartus_project_dir 00000056  00000000  00000000  000190fe  2**0
                  CONTENTS, READONLY
 29 .jdi          00005e6d  00000000  00000000  00019154  2**0
                  CONTENTS, READONLY
 30 .sopcinfo     00048d5f  00000000  00000000  0001efc1  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00008000 l    d  .entry	00000000 .entry
00008020 l    d  .exceptions	00000000 .exceptions
00008244 l    d  .text	00000000 .text
0000aa64 l    d  .rodata	00000000 .rodata
0000ab24 l    d  .rwdata	00000000 .rwdata
0000b0e4 l    d  .bss	00000000 .bss
0000b204 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../nios2_advance_bsp//obj/HAL/src/crt0.o
0000828c l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 counter.c
00000000 l    df *ABS*	00000000 memcpy.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 vfprintf.c
00008744 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
0000ab24 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_load.c
00008fb4 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
0000914c l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00009280 l     F .text	00000034 alt_dev_reg
0000ac04 l     O .rwdata	0000002c jtag_uart_0
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_fd.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_read.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 altera_avalon_timer_sc.c
0000957c l     F .text	00000078 alt_avalon_timer_sc_irq
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_close.c
000097c8 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_dev.c
0000991c l     F .text	0000002c alt_dev_null_write
00000000 l    df *ABS*	00000000 alt_dev_llist_insert.c
00009948 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_do_ctors.c
00000000 l    df *ABS*	00000000 alt_do_dtors.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_io_redirect.c
00009dbc l     F .text	000000c4 alt_open_fd
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_open.c
00009efc l     F .text	0000003c alt_get_errno
00009f38 l     F .text	000000c4 alt_file_locked
00000000 l    df *ABS*	00000000 alt_release_fd.c
00000000 l    df *ABS*	00000000 alt_tick.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00000000 l    df *ABS*	00000000 alt_find_dev.c
00000000 l    df *ABS*	00000000 alt_find_file.c
00000000 l    df *ABS*	00000000 alt_get_fd.c
00000000 l    df *ABS*	00000000 alt_icache_flush.c
00000000 l    df *ABS*	00000000 atexit.c
00000000 l    df *ABS*	00000000 exit.c
00000000 l    df *ABS*	00000000 memcmp.c
00000000 l    df *ABS*	00000000 __atexit.c
00000000 l    df *ABS*	00000000 __call_atexit.c
00000000 l    df *ABS*	00000000 alt_exit.c
0000b100 g     O .bss	00000004 alt_instruction_exception_handler
00008430 g     F .text	0000003c clear_MS4B
000090a0 g     F .text	0000007c alt_main
00008694 g     F .text	00000080 _puts_r
0000b104 g     O .bss	00000100 alt_irq
0000ae04 g       *ABS*	00000000 __flash_rwdata_start
00008648 g     F .text	0000004c printf
0000a358 g     F .text	00000024 altera_nios2_gen2_irq_init
00008000 g     F .entry	0000001c __reset
00008020 g       *ABS*	00000000 __flash_exceptions_start
0000b0e4 g     O .bss	00000004 errno
0000b0ec g     O .bss	00000004 alt_argv
00012dd8 g       *ABS*	00000000 _gp
0000911c g     F .text	00000030 usleep
0000ac58 g     O .rwdata	00000180 alt_fd_list
0000a37c g     F .text	00000090 alt_find_dev
000085e4 g     F .text	00000028 memcpy
00009e80 g     F .text	0000007c alt_io_redirect
0000aa64 g       *ABS*	00000000 __DTOR_END__
00008714 g     F .text	00000014 puts
0000a648 g     F .text	0000009c alt_exception_cause_generated_bad_addr
000093fc g     F .text	000000ec altera_avalon_jtag_uart_read
0000860c g     F .text	0000003c _printf_r
00008000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00008ef8 g     F .text	00000064 .hidden __udivsi3
0000a5b8 g     F .text	00000090 alt_icache_flush
0000adf0 g     O .rwdata	00000004 alt_max_fd
0000add8 g     O .rwdata	00000004 _global_impure_ptr
0000b204 g       *ABS*	00000000 __bss_end
00009ccc g     F .text	000000f0 alt_iic_isr_register
0000a250 g     F .text	00000108 alt_tick
00009c80 g     F .text	0000004c alt_ic_irq_enabled
0000a1b4 g     F .text	0000009c alt_alarm_stop
0000b0f4 g     O .bss	00000004 alt_irq_active
000080fc g     F .exceptions	000000d4 alt_irq_handler
0000ac30 g     O .rwdata	00000028 alt_dev_null
000098d4 g     F .text	00000048 alt_dcache_flush_all
0000ae04 g       *ABS*	00000000 __ram_rwdata_end
0000ade8 g     O .rwdata	00000008 alt_dev_list
00009188 g     F .text	000000f8 write
0000ab24 g       *ABS*	00000000 __ram_rodata_end
00008f5c g     F .text	00000058 .hidden __umodsi3
0000b204 g       *ABS*	00000000 end
000081d0 g     F .exceptions	00000074 alt_instruction_exception_entry
0000aa64 g       *ABS*	00000000 __CTOR_LIST__
0000ce20 g       *ABS*	00000000 __alt_stack_pointer
000095f4 g     F .text	0000007c alt_avalon_timer_sc_init
000094e8 g     F .text	00000094 altera_avalon_jtag_uart_write
000087b0 g     F .text	00000524 ___vfprintf_internal_r
0000a8a0 g     F .text	00000190 __call_exitprocs
00008244 g     F .text	0000004c _start
0000b0f8 g     O .bss	00000004 _alt_tick_rate
0000b0fc g     O .bss	00000004 _alt_nticks
000092ec g     F .text	00000050 alt_sys_init
0000a748 g     F .text	00000158 __register_exitproc
0000ab24 g       *ABS*	00000000 __ram_rwdata_start
0000aa64 g       *ABS*	00000000 __ram_rodata_start
0000933c g     F .text	00000060 altera_avalon_jtag_uart_read_fd
0000a514 g     F .text	000000a4 alt_get_fd
00009670 g     F .text	00000158 alt_busy_sleep
0000a718 g     F .text	00000030 memcmp
0000b204 g       *ABS*	00000000 __alt_stack_base
0000a40c g     F .text	00000108 alt_find_file
00009984 g     F .text	000000a4 alt_dev_llist_insert
00008cf0 g     F .text	000000b8 __sfvwrite_small_dev
0000b0e4 g       *ABS*	00000000 __bss_start
00008290 g     F .text	00000164 main
0000b0f0 g     O .bss	00000004 alt_envp
0000939c g     F .text	00000060 altera_avalon_jtag_uart_write_fd
0000adf4 g     O .rwdata	00000004 alt_errno
00008e00 g     F .text	00000084 .hidden __divsi3
0000aa64 g       *ABS*	00000000 __CTOR_END__
0000aa64 g       *ABS*	00000000 __flash_rodata_start
0000aa64 g       *ABS*	00000000 __DTOR_LIST__
000092b4 g     F .text	00000038 alt_irq_init
0000a150 g     F .text	00000064 alt_release_fd
0000a6e4 g     F .text	00000014 atexit
00008da8 g     F .text	00000058 _write_r
0000addc g     O .rwdata	00000004 _impure_ptr
0000b0e8 g     O .bss	00000004 alt_argc
00009a88 g     F .text	00000060 _do_dtors
00008020 g       .exceptions	00000000 alt_irq_entry
0000ade0 g     O .rwdata	00000008 alt_fs_list
000083f4 g     F .text	0000003c shift_4bits
00008020 g       *ABS*	00000000 __ram_exceptions_start
00009b1c g     F .text	00000050 alt_ic_isr_register
0000ae04 g       *ABS*	00000000 _edata
0000b204 g       *ABS*	00000000 _end
00008244 g       *ABS*	00000000 __ram_exceptions_end
00009bf4 g     F .text	0000008c alt_ic_irq_disable
0000a6f8 g     F .text	00000020 exit
00008e84 g     F .text	00000074 .hidden __modsi3
0000ce20 g       *ABS*	00000000 __alt_data_end
00008020 g     F .exceptions	00000000 alt_exception
0000aa30 g     F .text	00000034 _exit
00008728 g     F .text	0000001c strlen
00009ffc g     F .text	00000154 open
00009ae8 g     F .text	00000034 alt_icache_flush_all
0000adf8 g     O .rwdata	00000004 alt_priority_mask
0000846c g     F .text	00000178 convert
00009b6c g     F .text	00000088 alt_ic_irq_enable
00008cd4 g     F .text	0000001c __vfprintf_internal
0000adfc g     O .rwdata	00000008 alt_alarm_list
00009a28 g     F .text	00000060 _do_ctors
00009804 g     F .text	000000d0 close
0000901c g     F .text	00000084 alt_load



Disassembly of section .entry:

00008000 <__reset>:
#if NIOS2_ICACHE_SIZE > 0 && defined(ALT_ALLOW_CODE_AT_RESET) && (!defined(ALT_SIM_OPTIMIZE) || defined(NIOS2_ECC_PRESENT))
    /* Assume the instruction cache size is always a power of two. */
#if NIOS2_ICACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_ICACHE_SIZE)
#else
    movui r2, NIOS2_ICACHE_SIZE
    8000:	00840014 	movui	r2,4096
#endif

0:
    initi r2
    8004:	1001483a 	initi	r2
    addi r2, r2, -NIOS2_ICACHE_LINE_SIZE
    8008:	10bff804 	addi	r2,r2,-32
    bgt r2, zero, 0b
    800c:	00bffd16 	blt	zero,r2,8004 <_gp+0xffff522c>
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    8010:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    8014:	08609114 	ori	at,at,33348
    jmp r1
    8018:	0800683a 	jmp	at
    801c:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>

Disassembly of section .exceptions:

00008020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    8020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    8024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    8028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    802c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    8030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    8034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    8038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    803c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    8040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    8044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    8048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    804c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    8050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    8054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    8058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    805c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    8060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    8064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    8068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    806c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    8070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    8074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    8078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    807c:	10000326 	beq	r2,zero,808c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    8080:	20000226 	beq	r4,zero,808c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    8084:	00080fc0 	call	80fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    8088:	00000706 	br	80a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
    808c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
    8090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
    8094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
    8098:	00081d00 	call	81d0 <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
    809c:	1000021e 	bne	r2,zero,80a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
    80a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    80a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    80a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    80ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    80b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    80b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    80b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    80bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    80c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    80c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    80c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    80cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    80d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    80d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    80d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    80dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    80e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    80e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    80e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    80ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    80f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    80f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    80f8:	ef80083a 	eret

000080fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    80fc:	defff904 	addi	sp,sp,-28
    8100:	dfc00615 	stw	ra,24(sp)
    8104:	df000515 	stw	fp,20(sp)
    8108:	df000504 	addi	fp,sp,20
  
  /*
   * Notify the operating system that we are at interrupt level.
   */ 
  
  ALT_OS_INT_ENTER();
    810c:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    8110:	0005313a 	rdctl	r2,ipending
    8114:	e0bffe15 	stw	r2,-8(fp)

  return active;
    8118:	e0bffe17 	ldw	r2,-8(fp)
   * Consider the case where the high priority interupt is asserted during
   * the interrupt entry sequence for a lower priority interrupt to see why
   * this is the case.
   */

  active = alt_irq_pending ();
    811c:	e0bffb15 	stw	r2,-20(fp)

  do
  {
    i = 0;
    8120:	e03ffd15 	stw	zero,-12(fp)
    mask = 1;
    8124:	00800044 	movi	r2,1
    8128:	e0bffc15 	stw	r2,-16(fp)
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    812c:	e0fffb17 	ldw	r3,-20(fp)
    8130:	e0bffc17 	ldw	r2,-16(fp)
    8134:	1884703a 	and	r2,r3,r2
    8138:	10001426 	beq	r2,zero,818c <alt_irq_handler+0x90>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    813c:	00800074 	movhi	r2,1
    8140:	10ac4104 	addi	r2,r2,-20220
    8144:	e0fffd17 	ldw	r3,-12(fp)
    8148:	180690fa 	slli	r3,r3,3
    814c:	10c5883a 	add	r2,r2,r3
    8150:	10c00017 	ldw	r3,0(r2)
    8154:	00800074 	movhi	r2,1
    8158:	10ac4104 	addi	r2,r2,-20220
    815c:	e13ffd17 	ldw	r4,-12(fp)
    8160:	200890fa 	slli	r4,r4,3
    8164:	1105883a 	add	r2,r2,r4
    8168:	10800104 	addi	r2,r2,4
    816c:	10800017 	ldw	r2,0(r2)
    8170:	1009883a 	mov	r4,r2
    8174:	183ee83a 	callr	r3
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
    8178:	0001883a 	nop
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    817c:	0005313a 	rdctl	r2,ipending
    8180:	e0bfff15 	stw	r2,-4(fp)

  return active;
    8184:	e0bfff17 	ldw	r2,-4(fp)
    8188:	00000706 	br	81a8 <alt_irq_handler+0xac>
      }
      mask <<= 1;
    818c:	e0bffc17 	ldw	r2,-16(fp)
    8190:	1085883a 	add	r2,r2,r2
    8194:	e0bffc15 	stw	r2,-16(fp)
      i++;
    8198:	e0bffd17 	ldw	r2,-12(fp)
    819c:	10800044 	addi	r2,r2,1
    81a0:	e0bffd15 	stw	r2,-12(fp)

    } while (1);
    81a4:	003fe106 	br	812c <_gp+0xffff5354>

    active = alt_irq_pending ();
    81a8:	e0bffb15 	stw	r2,-20(fp)
    
  } while (active);
    81ac:	e0bffb17 	ldw	r2,-20(fp)
    81b0:	103fdb1e 	bne	r2,zero,8120 <_gp+0xffff5348>

  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
    81b4:	0001883a 	nop
}
    81b8:	0001883a 	nop
    81bc:	e037883a 	mov	sp,fp
    81c0:	dfc00117 	ldw	ra,4(sp)
    81c4:	df000017 	ldw	fp,0(sp)
    81c8:	dec00204 	addi	sp,sp,8
    81cc:	f800283a 	ret

000081d0 <alt_instruction_exception_entry>:
 * that handler if it has been registered. Absent a handler, it will
 * break break or hang as discussed below.
 */
int 
alt_instruction_exception_entry (alt_u32 exception_pc)
{
    81d0:	defffb04 	addi	sp,sp,-20
    81d4:	dfc00415 	stw	ra,16(sp)
    81d8:	df000315 	stw	fp,12(sp)
    81dc:	df000304 	addi	fp,sp,12
    81e0:	e13fff15 	stw	r4,-4(fp)
 * NIOS2_EXCEPTION_CAUSE_NOT_PRESENT. Your handling routine should
 * check the validity of the cause argument before proceeding.
 */
#ifdef NIOS2_HAS_EXTRA_EXCEPTION_INFO
  /* Get exception cause & "badaddr" */
  NIOS2_READ_EXCEPTION(cause);
    81e4:	000531fa 	rdctl	r2,exception
    81e8:	e0bffd15 	stw	r2,-12(fp)
  cause = ( (cause & NIOS2_EXCEPTION_REG_CAUSE_MASK) >>
    81ec:	e0bffd17 	ldw	r2,-12(fp)
    81f0:	10801f0c 	andi	r2,r2,124
    81f4:	1004d0ba 	srli	r2,r2,2
    81f8:	e0bffd15 	stw	r2,-12(fp)
              NIOS2_EXCEPTION_REG_CAUSE_OFST );

  NIOS2_READ_BADADDR(badaddr);
    81fc:	0005333a 	rdctl	r2,badaddr
    8200:	e0bffe15 	stw	r2,-8(fp)
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
    8204:	d0a0ca17 	ldw	r2,-31960(gp)
    8208:	10000726 	beq	r2,zero,8228 <alt_instruction_exception_entry+0x58>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
    820c:	d0a0ca17 	ldw	r2,-31960(gp)
    8210:	e0fffd17 	ldw	r3,-12(fp)
    8214:	e1bffe17 	ldw	r6,-8(fp)
    8218:	e17fff17 	ldw	r5,-4(fp)
    821c:	1809883a 	mov	r4,r3
    8220:	103ee83a 	callr	r2
    8224:	00000206 	br	8230 <alt_instruction_exception_entry+0x60>
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
    8228:	003da03a 	break	0
      ;
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
    822c:	0005883a 	mov	r2,zero
}
    8230:	e037883a 	mov	sp,fp
    8234:	dfc00117 	ldw	ra,4(sp)
    8238:	df000017 	ldw	fp,0(sp)
    823c:	dec00204 	addi	sp,sp,8
    8240:	f800283a 	ret

Disassembly of section .text:

00008244 <_start>:

    /* Assume the data cache size is always a power of two. */
#if NIOS2_DCACHE_SIZE > 0x8000
    movhi r2, %hi(NIOS2_DCACHE_SIZE)
#else
    movui r2, NIOS2_DCACHE_SIZE
    8244:	00820014 	movui	r2,2048
#endif

0:
    initd 0(r2)
    8248:	10000033 	initd	0(r2)
#ifdef NIOS2_ECC_PRESENT
    addi r2, r2, -4
#else
    addi r2, r2, -NIOS2_DCACHE_LINE_SIZE
    824c:	10bff804 	addi	r2,r2,-32
#endif
    bgt r2, zero, 0b
    8250:	00bffd16 	blt	zero,r2,8248 <_gp+0xffff5470>

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    8254:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    8258:	def38814 	ori	sp,sp,52768
    movhi gp, %hi(_gp)
    825c:	06800074 	movhi	gp,1
    ori gp, gp, %lo(_gp)
    8260:	d68b7614 	ori	gp,gp,11736
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    8264:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    8268:	10ac3914 	ori	r2,r2,45284

    movhi r3, %hi(__bss_end)
    826c:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    8270:	18ec8114 	ori	r3,r3,45572

    beq r2, r3, 1f
    8274:	10c00326 	beq	r2,r3,8284 <_start+0x40>

0:
    stw zero, (r2)
    8278:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    827c:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    8280:	10fffd36 	bltu	r2,r3,8278 <_gp+0xffff54a0>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    8284:	000901c0 	call	901c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    8288:	00090a00 	call	90a0 <alt_main>

0000828c <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    828c:	003fff06 	br	828c <_gp+0xffff54b4>

00008290 <main>:

int convert(alt_u8 c);
int shift_4bits(alt_u8 b);
int clear_MS4B(alt_u8 a);

int main(){
    8290:	defffb04 	addi	sp,sp,-20
    8294:	dfc00415 	stw	ra,16(sp)
    8298:	df000315 	stw	fp,12(sp)
    829c:	df000304 	addi	fp,sp,12
	printf("My counter program!\n");
    82a0:	01000074 	movhi	r4,1
    82a4:	212a9904 	addi	r4,r4,-21916
    82a8:	00087140 	call	8714 <puts>
	alt_u8 count = 0; //up to 0xff
    82ac:	e03ffd05 	stb	zero,-12(fp)
	alt_u16 resultt = 0b0000000000000000;
    82b0:	e03ffd8d 	sth	zero,-10(fp)
	alt_u8 sw;
	alt_u16 output = 0b0000000000000000;
    82b4:	e03ffe0d 	sth	zero,-8(fp)

while(1){
	//output the count to hex0, hex1
	IOWR_ALTERA_AVALON_PIO_DATA(SEVEN_SEG_PIO_BASE, resultt);
    82b8:	e0fffd8b 	ldhu	r3,-10(fp)
    82bc:	00800074 	movhi	r2,1
    82c0:	10841004 	addi	r2,r2,4160
    82c4:	10c00035 	stwio	r3,0(r2)

	//output the sw value to hex1, hex2
	IOWR_ALTERA_AVALON_PIO_DATA(SEVEN_SEG_PIO2_BASE, output);
    82c8:	e0fffe0b 	ldhu	r3,-8(fp)
    82cc:	00800074 	movhi	r2,1
    82d0:	10840804 	addi	r2,r2,4128
    82d4:	10c00035 	stwio	r3,0(r2)

	//read for the switches
	sw = IORD_ALTERA_AVALON_PIO_DATA(SW_PIO_BASE);
    82d8:	00800074 	movhi	r2,1
    82dc:	10840c04 	addi	r2,r2,4144
    82e0:	10800037 	ldwio	r2,0(r2)
    82e4:	e0bffe85 	stb	r2,-6(fp)

	//place-holder value
	alt_u8 x,y;

	if(sw >= 0){
		printf("switch value: %2X,", sw);
    82e8:	e0bffe83 	ldbu	r2,-6(fp)
    82ec:	100b883a 	mov	r5,r2
    82f0:	01000074 	movhi	r4,1
    82f4:	212a9e04 	addi	r4,r4,-21896
    82f8:	00086480 	call	8648 <printf>
		x = shift_4bits(sw); 		//make x equal to sw
    82fc:	e0bffe83 	ldbu	r2,-6(fp)
    8300:	1009883a 	mov	r4,r2
    8304:	00083f40 	call	83f4 <shift_4bits>
    8308:	e0bffec5 	stb	r2,-5(fp)
		x = convert(x); //convert to 7-seg value
    830c:	e0bffec3 	ldbu	r2,-5(fp)
    8310:	1009883a 	mov	r4,r2
    8314:	000846c0 	call	846c <convert>
    8318:	e0bffec5 	stb	r2,-5(fp)
		y = clear_MS4B(sw);
    831c:	e0bffe83 	ldbu	r2,-6(fp)
    8320:	1009883a 	mov	r4,r2
    8324:	00084300 	call	8430 <clear_MS4B>
    8328:	e0bfff05 	stb	r2,-4(fp)
		y = convert(y);
    832c:	e0bfff03 	ldbu	r2,-4(fp)
    8330:	1009883a 	mov	r4,r2
    8334:	000846c0 	call	846c <convert>
    8338:	e0bfff05 	stb	r2,-4(fp)
		output = x<<8;
    833c:	e0bffec3 	ldbu	r2,-5(fp)
    8340:	1004923a 	slli	r2,r2,8
    8344:	e0bffe0d 	sth	r2,-8(fp)
		output = output + y;
    8348:	e0ffff03 	ldbu	r3,-4(fp)
    834c:	e0bffe0b 	ldhu	r2,-8(fp)
    8350:	1885883a 	add	r2,r3,r2
    8354:	e0bffe0d 	sth	r2,-8(fp)
		printf("converted switch value %2X, ", output);
    8358:	e0bffe0b 	ldhu	r2,-8(fp)
    835c:	100b883a 	mov	r5,r2
    8360:	01000074 	movhi	r4,1
    8364:	212aa304 	addi	r4,r4,-21876
    8368:	00086480 	call	8648 <printf>
	} //end if
	if(count == 0xFF){
    836c:	e0bffd03 	ldbu	r2,-12(fp)
    8370:	10803fd8 	cmpnei	r2,r2,255
    8374:	1000011e 	bne	r2,zero,837c <main+0xec>
		count = 0x00;
    8378:	e03ffd05 	stb	zero,-12(fp)
	}
				x = shift_4bits(count); 		//make x equal to sw
    837c:	e0bffd03 	ldbu	r2,-12(fp)
    8380:	1009883a 	mov	r4,r2
    8384:	00083f40 	call	83f4 <shift_4bits>
    8388:	e0bffec5 	stb	r2,-5(fp)
				x = convert(x); //convert to 7-seg value
    838c:	e0bffec3 	ldbu	r2,-5(fp)
    8390:	1009883a 	mov	r4,r2
    8394:	000846c0 	call	846c <convert>
    8398:	e0bffec5 	stb	r2,-5(fp)
				y = clear_MS4B(count);
    839c:	e0bffd03 	ldbu	r2,-12(fp)
    83a0:	1009883a 	mov	r4,r2
    83a4:	00084300 	call	8430 <clear_MS4B>
    83a8:	e0bfff05 	stb	r2,-4(fp)
				y = convert(y);
    83ac:	e0bfff03 	ldbu	r2,-4(fp)
    83b0:	1009883a 	mov	r4,r2
    83b4:	000846c0 	call	846c <convert>
    83b8:	e0bfff05 	stb	r2,-4(fp)
			resultt = x<<8;
    83bc:	e0bffec3 	ldbu	r2,-5(fp)
    83c0:	1004923a 	slli	r2,r2,8
    83c4:	e0bffd8d 	sth	r2,-10(fp)
			resultt = resultt + y;
    83c8:	e0ffff03 	ldbu	r3,-4(fp)
    83cc:	e0bffd8b 	ldhu	r2,-10(fp)
    83d0:	1885883a 	add	r2,r3,r2
    83d4:	e0bffd8d 	sth	r2,-10(fp)
			usleep(600000); //sleep for 3 second
    83d8:	01000274 	movhi	r4,9
    83dc:	2109f004 	addi	r4,r4,10176
    83e0:	000911c0 	call	911c <usleep>
			count++;
    83e4:	e0bffd03 	ldbu	r2,-12(fp)
    83e8:	10800044 	addi	r2,r2,1
    83ec:	e0bffd05 	stb	r2,-12(fp)
}//end while loop
    83f0:	003fb106 	br	82b8 <_gp+0xffff54e0>

000083f4 <shift_4bits>:
return 0;
}//end main

int shift_4bits(alt_u8 b){
    83f4:	defffd04 	addi	sp,sp,-12
    83f8:	df000215 	stw	fp,8(sp)
    83fc:	df000204 	addi	fp,sp,8
    8400:	2005883a 	mov	r2,r4
    8404:	e0bfff05 	stb	r2,-4(fp)
	alt_u8 x = b;
    8408:	e0bfff03 	ldbu	r2,-4(fp)
    840c:	e0bffe05 	stb	r2,-8(fp)
	x = x>>4;
    8410:	e0bffe03 	ldbu	r2,-8(fp)
    8414:	1004d13a 	srli	r2,r2,4
    8418:	e0bffe05 	stb	r2,-8(fp)
	return x;
    841c:	e0bffe03 	ldbu	r2,-8(fp)
}//end function
    8420:	e037883a 	mov	sp,fp
    8424:	df000017 	ldw	fp,0(sp)
    8428:	dec00104 	addi	sp,sp,4
    842c:	f800283a 	ret

00008430 <clear_MS4B>:

int clear_MS4B(alt_u8 a){
    8430:	defffd04 	addi	sp,sp,-12
    8434:	df000215 	stw	fp,8(sp)
    8438:	df000204 	addi	fp,sp,8
    843c:	2005883a 	mov	r2,r4
    8440:	e0bfff05 	stb	r2,-4(fp)
	alt_u8 x = a;
    8444:	e0bfff03 	ldbu	r2,-4(fp)
    8448:	e0bffe05 	stb	r2,-8(fp)
	x &= 0x0F;
    844c:	e0bffe03 	ldbu	r2,-8(fp)
    8450:	108003cc 	andi	r2,r2,15
    8454:	e0bffe05 	stb	r2,-8(fp)
	return x;
    8458:	e0bffe03 	ldbu	r2,-8(fp)
}//end function
    845c:	e037883a 	mov	sp,fp
    8460:	df000017 	ldw	fp,0(sp)
    8464:	dec00104 	addi	sp,sp,4
    8468:	f800283a 	ret

0000846c <convert>:

/*function returning the count value from decimal to hex value */
int convert(alt_u8 c){
    846c:	deffec04 	addi	sp,sp,-80
    8470:	dfc01315 	stw	ra,76(sp)
    8474:	df001215 	stw	fp,72(sp)
    8478:	df001204 	addi	fp,sp,72
    847c:	2005883a 	mov	r2,r4
    8480:	e0bfff05 	stb	r2,-4(fp)
		alt_u8 result;
		int LEDarray[] = {0x40,0x79,0x24,0x30,0x19,0x12,0x02,0xD8,0x00,0x18,0x08,0x83,0x46,0xA1,0x06,0x0E};
    8484:	00800074 	movhi	r2,1
    8488:	10aaab04 	addi	r2,r2,-21844
    848c:	e0ffef04 	addi	r3,fp,-68
    8490:	1009883a 	mov	r4,r2
    8494:	00801004 	movi	r2,64
    8498:	100d883a 	mov	r6,r2
    849c:	200b883a 	mov	r5,r4
    84a0:	1809883a 	mov	r4,r3
    84a4:	00085e40 	call	85e4 <memcpy>
		    switch(c){
    84a8:	e0bfff03 	ldbu	r2,-4(fp)
    84ac:	10c00428 	cmpgeui	r3,r2,16
    84b0:	1800461e 	bne	r3,zero,85cc <convert+0x160>
    84b4:	100690ba 	slli	r3,r2,2
    84b8:	00800074 	movhi	r2,1
    84bc:	10a13304 	addi	r2,r2,-31540
    84c0:	1885883a 	add	r2,r3,r2
    84c4:	10800017 	ldw	r2,0(r2)
    84c8:	1000683a 	jmp	r2
    84cc:	0000850c 	andi	zero,zero,532
    84d0:	00008518 	cmpnei	zero,zero,532
    84d4:	00008524 	muli	zero,zero,532
    84d8:	00008530 	cmpltui	zero,zero,532
    84dc:	0000853c 	xorhi	zero,zero,532
    84e0:	00008548 	cmpgei	zero,zero,533
    84e4:	00008554 	movui	zero,533
    84e8:	00008560 	cmpeqi	zero,zero,533
    84ec:	0000856c 	andhi	zero,zero,533
    84f0:	00008578 	rdprs	zero,zero,533
    84f4:	00008584 	movi	zero,534
    84f8:	00008590 	cmplti	zero,zero,534
    84fc:	0000859c 	xori	zero,zero,534
    8500:	000085a8 	cmpgeui	zero,zero,534
    8504:	000085b4 	movhi	zero,534
    8508:	000085c0 	call	85c <__alt_mem_onchip_memory2_0-0x77a4>
		    case 0:
		       result = (LEDarray[0]);
    850c:	e0bfef17 	ldw	r2,-68(fp)
    8510:	e0bfee05 	stb	r2,-72(fp)
		        break;
    8514:	00002d06 	br	85cc <convert+0x160>
		    case 1:
		    	result = (LEDarray[1]);
    8518:	e0bff017 	ldw	r2,-64(fp)
    851c:	e0bfee05 	stb	r2,-72(fp)
		        break;
    8520:	00002a06 	br	85cc <convert+0x160>
		    case 2:
		    	result = (LEDarray[2]);
    8524:	e0bff117 	ldw	r2,-60(fp)
    8528:	e0bfee05 	stb	r2,-72(fp)
		        break;
    852c:	00002706 	br	85cc <convert+0x160>
		    case 3:
		    	result = (LEDarray[3]);
    8530:	e0bff217 	ldw	r2,-56(fp)
    8534:	e0bfee05 	stb	r2,-72(fp)
		        break;
    8538:	00002406 	br	85cc <convert+0x160>
		    case 4:
		        result = LEDarray[4];
    853c:	e0bff317 	ldw	r2,-52(fp)
    8540:	e0bfee05 	stb	r2,-72(fp)
		        break;
    8544:	00002106 	br	85cc <convert+0x160>
		    case 5:
		    	result = (LEDarray[5]);
    8548:	e0bff417 	ldw	r2,-48(fp)
    854c:	e0bfee05 	stb	r2,-72(fp)
		        break;
    8550:	00001e06 	br	85cc <convert+0x160>
		    case 6:
		    	result = (LEDarray[6]);
    8554:	e0bff517 	ldw	r2,-44(fp)
    8558:	e0bfee05 	stb	r2,-72(fp)
		        break;
    855c:	00001b06 	br	85cc <convert+0x160>
		    case 7:
		    	result = (LEDarray[7]);
    8560:	e0bff617 	ldw	r2,-40(fp)
    8564:	e0bfee05 	stb	r2,-72(fp)
		        break;
    8568:	00001806 	br	85cc <convert+0x160>
		    case 8:
		    	result = (LEDarray[8]);
    856c:	e0bff717 	ldw	r2,-36(fp)
    8570:	e0bfee05 	stb	r2,-72(fp)
		    	break;
    8574:	00001506 	br	85cc <convert+0x160>
		    case 9:
		    	result = (LEDarray[9]);
    8578:	e0bff817 	ldw	r2,-32(fp)
    857c:	e0bfee05 	stb	r2,-72(fp)
		        break;
    8580:	00001206 	br	85cc <convert+0x160>
		    case 10:
		    	result = (LEDarray[10]);
    8584:	e0bff917 	ldw	r2,-28(fp)
    8588:	e0bfee05 	stb	r2,-72(fp)
		        break;
    858c:	00000f06 	br	85cc <convert+0x160>
		    case 11:
		    	result = (LEDarray[11]);
    8590:	e0bffa17 	ldw	r2,-24(fp)
    8594:	e0bfee05 	stb	r2,-72(fp)
		        break;
    8598:	00000c06 	br	85cc <convert+0x160>
		    case 12:
		    	result = (LEDarray[12]);
    859c:	e0bffb17 	ldw	r2,-20(fp)
    85a0:	e0bfee05 	stb	r2,-72(fp)
		        break;
    85a4:	00000906 	br	85cc <convert+0x160>
		    case 13:
		    	result = (LEDarray[13]);
    85a8:	e0bffc17 	ldw	r2,-16(fp)
    85ac:	e0bfee05 	stb	r2,-72(fp)
		        break;
    85b0:	00000606 	br	85cc <convert+0x160>
		    case 14:
		    	result = (LEDarray[14]);
    85b4:	e0bffd17 	ldw	r2,-12(fp)
    85b8:	e0bfee05 	stb	r2,-72(fp)
		        break;
    85bc:	00000306 	br	85cc <convert+0x160>
		    case 15:
		    	result = (LEDarray[15]);
    85c0:	e0bffe17 	ldw	r2,-8(fp)
    85c4:	e0bfee05 	stb	r2,-72(fp)
		        break;
    85c8:	0001883a 	nop
		    }//end switch statement
		    return result;
    85cc:	e0bfee03 	ldbu	r2,-72(fp)
}//end function
    85d0:	e037883a 	mov	sp,fp
    85d4:	dfc00117 	ldw	ra,4(sp)
    85d8:	df000017 	ldw	fp,0(sp)
    85dc:	dec00204 	addi	sp,sp,8
    85e0:	f800283a 	ret

000085e4 <memcpy>:
    85e4:	2005883a 	mov	r2,r4
    85e8:	2007883a 	mov	r3,r4
    85ec:	218d883a 	add	r6,r4,r6
    85f0:	19800526 	beq	r3,r6,8608 <memcpy+0x24>
    85f4:	29000003 	ldbu	r4,0(r5)
    85f8:	18c00044 	addi	r3,r3,1
    85fc:	29400044 	addi	r5,r5,1
    8600:	193fffc5 	stb	r4,-1(r3)
    8604:	003ffa06 	br	85f0 <_gp+0xffff5818>
    8608:	f800283a 	ret

0000860c <_printf_r>:
    860c:	defffd04 	addi	sp,sp,-12
    8610:	dfc00015 	stw	ra,0(sp)
    8614:	d9800115 	stw	r6,4(sp)
    8618:	d9c00215 	stw	r7,8(sp)
    861c:	20c00217 	ldw	r3,8(r4)
    8620:	01800074 	movhi	r6,1
    8624:	31a33c04 	addi	r6,r6,-29456
    8628:	19800115 	stw	r6,4(r3)
    862c:	280d883a 	mov	r6,r5
    8630:	21400217 	ldw	r5,8(r4)
    8634:	d9c00104 	addi	r7,sp,4
    8638:	00087b00 	call	87b0 <___vfprintf_internal_r>
    863c:	dfc00017 	ldw	ra,0(sp)
    8640:	dec00304 	addi	sp,sp,12
    8644:	f800283a 	ret

00008648 <printf>:
    8648:	defffc04 	addi	sp,sp,-16
    864c:	dfc00015 	stw	ra,0(sp)
    8650:	d9400115 	stw	r5,4(sp)
    8654:	d9800215 	stw	r6,8(sp)
    8658:	d9c00315 	stw	r7,12(sp)
    865c:	00800074 	movhi	r2,1
    8660:	10ab7704 	addi	r2,r2,-21028
    8664:	10800017 	ldw	r2,0(r2)
    8668:	01400074 	movhi	r5,1
    866c:	29633c04 	addi	r5,r5,-29456
    8670:	10c00217 	ldw	r3,8(r2)
    8674:	d9800104 	addi	r6,sp,4
    8678:	19400115 	stw	r5,4(r3)
    867c:	200b883a 	mov	r5,r4
    8680:	11000217 	ldw	r4,8(r2)
    8684:	0008cd40 	call	8cd4 <__vfprintf_internal>
    8688:	dfc00017 	ldw	ra,0(sp)
    868c:	dec00404 	addi	sp,sp,16
    8690:	f800283a 	ret

00008694 <_puts_r>:
    8694:	defffd04 	addi	sp,sp,-12
    8698:	dc000015 	stw	r16,0(sp)
    869c:	2021883a 	mov	r16,r4
    86a0:	2809883a 	mov	r4,r5
    86a4:	dfc00215 	stw	ra,8(sp)
    86a8:	dc400115 	stw	r17,4(sp)
    86ac:	2823883a 	mov	r17,r5
    86b0:	00087280 	call	8728 <strlen>
    86b4:	81400217 	ldw	r5,8(r16)
    86b8:	01000074 	movhi	r4,1
    86bc:	21233c04 	addi	r4,r4,-29456
    86c0:	29000115 	stw	r4,4(r5)
    86c4:	100f883a 	mov	r7,r2
    86c8:	880d883a 	mov	r6,r17
    86cc:	8009883a 	mov	r4,r16
    86d0:	0008cf00 	call	8cf0 <__sfvwrite_small_dev>
    86d4:	00ffffc4 	movi	r3,-1
    86d8:	10c00926 	beq	r2,r3,8700 <_puts_r+0x6c>
    86dc:	81400217 	ldw	r5,8(r16)
    86e0:	01800074 	movhi	r6,1
    86e4:	01c00044 	movi	r7,1
    86e8:	28800117 	ldw	r2,4(r5)
    86ec:	31aabb04 	addi	r6,r6,-21780
    86f0:	8009883a 	mov	r4,r16
    86f4:	103ee83a 	callr	r2
    86f8:	10bfffe0 	cmpeqi	r2,r2,-1
    86fc:	0085c83a 	sub	r2,zero,r2
    8700:	dfc00217 	ldw	ra,8(sp)
    8704:	dc400117 	ldw	r17,4(sp)
    8708:	dc000017 	ldw	r16,0(sp)
    870c:	dec00304 	addi	sp,sp,12
    8710:	f800283a 	ret

00008714 <puts>:
    8714:	00800074 	movhi	r2,1
    8718:	10ab7704 	addi	r2,r2,-21028
    871c:	200b883a 	mov	r5,r4
    8720:	11000017 	ldw	r4,0(r2)
    8724:	00086941 	jmpi	8694 <_puts_r>

00008728 <strlen>:
    8728:	2005883a 	mov	r2,r4
    872c:	10c00007 	ldb	r3,0(r2)
    8730:	18000226 	beq	r3,zero,873c <strlen+0x14>
    8734:	10800044 	addi	r2,r2,1
    8738:	003ffc06 	br	872c <_gp+0xffff5954>
    873c:	1105c83a 	sub	r2,r2,r4
    8740:	f800283a 	ret

00008744 <print_repeat>:
    8744:	defffb04 	addi	sp,sp,-20
    8748:	dc800315 	stw	r18,12(sp)
    874c:	dc400215 	stw	r17,8(sp)
    8750:	dc000115 	stw	r16,4(sp)
    8754:	dfc00415 	stw	ra,16(sp)
    8758:	2025883a 	mov	r18,r4
    875c:	2823883a 	mov	r17,r5
    8760:	d9800005 	stb	r6,0(sp)
    8764:	3821883a 	mov	r16,r7
    8768:	04000a0e 	bge	zero,r16,8794 <print_repeat+0x50>
    876c:	88800117 	ldw	r2,4(r17)
    8770:	01c00044 	movi	r7,1
    8774:	d80d883a 	mov	r6,sp
    8778:	880b883a 	mov	r5,r17
    877c:	9009883a 	mov	r4,r18
    8780:	103ee83a 	callr	r2
    8784:	843fffc4 	addi	r16,r16,-1
    8788:	103ff726 	beq	r2,zero,8768 <_gp+0xffff5990>
    878c:	00bfffc4 	movi	r2,-1
    8790:	00000106 	br	8798 <print_repeat+0x54>
    8794:	0005883a 	mov	r2,zero
    8798:	dfc00417 	ldw	ra,16(sp)
    879c:	dc800317 	ldw	r18,12(sp)
    87a0:	dc400217 	ldw	r17,8(sp)
    87a4:	dc000117 	ldw	r16,4(sp)
    87a8:	dec00504 	addi	sp,sp,20
    87ac:	f800283a 	ret

000087b0 <___vfprintf_internal_r>:
    87b0:	deffe504 	addi	sp,sp,-108
    87b4:	d8c00804 	addi	r3,sp,32
    87b8:	df001915 	stw	fp,100(sp)
    87bc:	ddc01815 	stw	r23,96(sp)
    87c0:	dd801715 	stw	r22,92(sp)
    87c4:	dd401615 	stw	r21,88(sp)
    87c8:	dd001515 	stw	r20,84(sp)
    87cc:	dcc01415 	stw	r19,80(sp)
    87d0:	dc801315 	stw	r18,76(sp)
    87d4:	dc401215 	stw	r17,72(sp)
    87d8:	dc001115 	stw	r16,68(sp)
    87dc:	dfc01a15 	stw	ra,104(sp)
    87e0:	2027883a 	mov	r19,r4
    87e4:	2839883a 	mov	fp,r5
    87e8:	382d883a 	mov	r22,r7
    87ec:	d9800f15 	stw	r6,60(sp)
    87f0:	0021883a 	mov	r16,zero
    87f4:	d8000e15 	stw	zero,56(sp)
    87f8:	002f883a 	mov	r23,zero
    87fc:	002b883a 	mov	r21,zero
    8800:	0025883a 	mov	r18,zero
    8804:	0023883a 	mov	r17,zero
    8808:	d8000c15 	stw	zero,48(sp)
    880c:	d8000b15 	stw	zero,44(sp)
    8810:	0029883a 	mov	r20,zero
    8814:	d8c00915 	stw	r3,36(sp)
    8818:	d8c00f17 	ldw	r3,60(sp)
    881c:	19000003 	ldbu	r4,0(r3)
    8820:	20803fcc 	andi	r2,r4,255
    8824:	1080201c 	xori	r2,r2,128
    8828:	10bfe004 	addi	r2,r2,-128
    882c:	10011c26 	beq	r2,zero,8ca0 <___vfprintf_internal_r+0x4f0>
    8830:	00c00044 	movi	r3,1
    8834:	a0c01426 	beq	r20,r3,8888 <___vfprintf_internal_r+0xd8>
    8838:	1d000216 	blt	r3,r20,8844 <___vfprintf_internal_r+0x94>
    883c:	a0000626 	beq	r20,zero,8858 <___vfprintf_internal_r+0xa8>
    8840:	00011306 	br	8c90 <___vfprintf_internal_r+0x4e0>
    8844:	01400084 	movi	r5,2
    8848:	a1401d26 	beq	r20,r5,88c0 <___vfprintf_internal_r+0x110>
    884c:	014000c4 	movi	r5,3
    8850:	a1402926 	beq	r20,r5,88f8 <___vfprintf_internal_r+0x148>
    8854:	00010e06 	br	8c90 <___vfprintf_internal_r+0x4e0>
    8858:	01400944 	movi	r5,37
    885c:	1140fb26 	beq	r2,r5,8c4c <___vfprintf_internal_r+0x49c>
    8860:	e0800117 	ldw	r2,4(fp)
    8864:	d9000005 	stb	r4,0(sp)
    8868:	01c00044 	movi	r7,1
    886c:	d80d883a 	mov	r6,sp
    8870:	e00b883a 	mov	r5,fp
    8874:	9809883a 	mov	r4,r19
    8878:	103ee83a 	callr	r2
    887c:	1000d61e 	bne	r2,zero,8bd8 <___vfprintf_internal_r+0x428>
    8880:	84000044 	addi	r16,r16,1
    8884:	00010206 	br	8c90 <___vfprintf_internal_r+0x4e0>
    8888:	01400c04 	movi	r5,48
    888c:	1140f826 	beq	r2,r5,8c70 <___vfprintf_internal_r+0x4c0>
    8890:	01400944 	movi	r5,37
    8894:	11400a1e 	bne	r2,r5,88c0 <___vfprintf_internal_r+0x110>
    8898:	d8800005 	stb	r2,0(sp)
    889c:	e0800117 	ldw	r2,4(fp)
    88a0:	a00f883a 	mov	r7,r20
    88a4:	d80d883a 	mov	r6,sp
    88a8:	e00b883a 	mov	r5,fp
    88ac:	9809883a 	mov	r4,r19
    88b0:	103ee83a 	callr	r2
    88b4:	1000c81e 	bne	r2,zero,8bd8 <___vfprintf_internal_r+0x428>
    88b8:	84000044 	addi	r16,r16,1
    88bc:	0000f306 	br	8c8c <___vfprintf_internal_r+0x4dc>
    88c0:	217ff404 	addi	r5,r4,-48
    88c4:	29403fcc 	andi	r5,r5,255
    88c8:	00c00244 	movi	r3,9
    88cc:	19400736 	bltu	r3,r5,88ec <___vfprintf_internal_r+0x13c>
    88d0:	00bfffc4 	movi	r2,-1
    88d4:	88800226 	beq	r17,r2,88e0 <___vfprintf_internal_r+0x130>
    88d8:	8c4002a4 	muli	r17,r17,10
    88dc:	00000106 	br	88e4 <___vfprintf_internal_r+0x134>
    88e0:	0023883a 	mov	r17,zero
    88e4:	2c63883a 	add	r17,r5,r17
    88e8:	0000e206 	br	8c74 <___vfprintf_internal_r+0x4c4>
    88ec:	01400b84 	movi	r5,46
    88f0:	1140e426 	beq	r2,r5,8c84 <___vfprintf_internal_r+0x4d4>
    88f4:	05000084 	movi	r20,2
    88f8:	213ff404 	addi	r4,r4,-48
    88fc:	21003fcc 	andi	r4,r4,255
    8900:	00c00244 	movi	r3,9
    8904:	19000736 	bltu	r3,r4,8924 <___vfprintf_internal_r+0x174>
    8908:	00bfffc4 	movi	r2,-1
    890c:	90800226 	beq	r18,r2,8918 <___vfprintf_internal_r+0x168>
    8910:	948002a4 	muli	r18,r18,10
    8914:	00000106 	br	891c <___vfprintf_internal_r+0x16c>
    8918:	0025883a 	mov	r18,zero
    891c:	24a5883a 	add	r18,r4,r18
    8920:	0000db06 	br	8c90 <___vfprintf_internal_r+0x4e0>
    8924:	00c01b04 	movi	r3,108
    8928:	10c0d426 	beq	r2,r3,8c7c <___vfprintf_internal_r+0x4cc>
    892c:	013fffc4 	movi	r4,-1
    8930:	91000226 	beq	r18,r4,893c <___vfprintf_internal_r+0x18c>
    8934:	d8000b15 	stw	zero,44(sp)
    8938:	00000106 	br	8940 <___vfprintf_internal_r+0x190>
    893c:	04800044 	movi	r18,1
    8940:	01001a44 	movi	r4,105
    8944:	11001626 	beq	r2,r4,89a0 <___vfprintf_internal_r+0x1f0>
    8948:	20800916 	blt	r4,r2,8970 <___vfprintf_internal_r+0x1c0>
    894c:	010018c4 	movi	r4,99
    8950:	11008a26 	beq	r2,r4,8b7c <___vfprintf_internal_r+0x3cc>
    8954:	01001904 	movi	r4,100
    8958:	11001126 	beq	r2,r4,89a0 <___vfprintf_internal_r+0x1f0>
    895c:	01001604 	movi	r4,88
    8960:	1100ca1e 	bne	r2,r4,8c8c <___vfprintf_internal_r+0x4dc>
    8964:	00c00044 	movi	r3,1
    8968:	d8c00e15 	stw	r3,56(sp)
    896c:	00001406 	br	89c0 <___vfprintf_internal_r+0x210>
    8970:	01001cc4 	movi	r4,115
    8974:	11009a26 	beq	r2,r4,8be0 <___vfprintf_internal_r+0x430>
    8978:	20800416 	blt	r4,r2,898c <___vfprintf_internal_r+0x1dc>
    897c:	01001bc4 	movi	r4,111
    8980:	1100c21e 	bne	r2,r4,8c8c <___vfprintf_internal_r+0x4dc>
    8984:	05400204 	movi	r21,8
    8988:	00000e06 	br	89c4 <___vfprintf_internal_r+0x214>
    898c:	01001d44 	movi	r4,117
    8990:	11000c26 	beq	r2,r4,89c4 <___vfprintf_internal_r+0x214>
    8994:	01001e04 	movi	r4,120
    8998:	11000926 	beq	r2,r4,89c0 <___vfprintf_internal_r+0x210>
    899c:	0000bb06 	br	8c8c <___vfprintf_internal_r+0x4dc>
    89a0:	b5000104 	addi	r20,r22,4
    89a4:	b8000726 	beq	r23,zero,89c4 <___vfprintf_internal_r+0x214>
    89a8:	dd000d15 	stw	r20,52(sp)
    89ac:	b5800017 	ldw	r22,0(r22)
    89b0:	b000080e 	bge	r22,zero,89d4 <___vfprintf_internal_r+0x224>
    89b4:	05adc83a 	sub	r22,zero,r22
    89b8:	02800044 	movi	r10,1
    89bc:	00000606 	br	89d8 <___vfprintf_internal_r+0x228>
    89c0:	05400404 	movi	r21,16
    89c4:	b0c00104 	addi	r3,r22,4
    89c8:	d8c00d15 	stw	r3,52(sp)
    89cc:	b5800017 	ldw	r22,0(r22)
    89d0:	002f883a 	mov	r23,zero
    89d4:	0015883a 	mov	r10,zero
    89d8:	d829883a 	mov	r20,sp
    89dc:	b0001426 	beq	r22,zero,8a30 <___vfprintf_internal_r+0x280>
    89e0:	b009883a 	mov	r4,r22
    89e4:	a80b883a 	mov	r5,r21
    89e8:	da801015 	stw	r10,64(sp)
    89ec:	0008ef80 	call	8ef8 <__udivsi3>
    89f0:	1549383a 	mul	r4,r2,r21
    89f4:	00c00244 	movi	r3,9
    89f8:	da801017 	ldw	r10,64(sp)
    89fc:	b12dc83a 	sub	r22,r22,r4
    8a00:	1d800216 	blt	r3,r22,8a0c <___vfprintf_internal_r+0x25c>
    8a04:	b5800c04 	addi	r22,r22,48
    8a08:	00000506 	br	8a20 <___vfprintf_internal_r+0x270>
    8a0c:	d8c00e17 	ldw	r3,56(sp)
    8a10:	18000226 	beq	r3,zero,8a1c <___vfprintf_internal_r+0x26c>
    8a14:	b5800dc4 	addi	r22,r22,55
    8a18:	00000106 	br	8a20 <___vfprintf_internal_r+0x270>
    8a1c:	b58015c4 	addi	r22,r22,87
    8a20:	a5800005 	stb	r22,0(r20)
    8a24:	a5000044 	addi	r20,r20,1
    8a28:	102d883a 	mov	r22,r2
    8a2c:	003feb06 	br	89dc <_gp+0xffff5c04>
    8a30:	a6c7c83a 	sub	r3,r20,sp
    8a34:	d8c00a15 	stw	r3,40(sp)
    8a38:	90c5c83a 	sub	r2,r18,r3
    8a3c:	00800a0e 	bge	zero,r2,8a68 <___vfprintf_internal_r+0x2b8>
    8a40:	a085883a 	add	r2,r20,r2
    8a44:	01400c04 	movi	r5,48
    8a48:	d8c00917 	ldw	r3,36(sp)
    8a4c:	a009883a 	mov	r4,r20
    8a50:	a0c0032e 	bgeu	r20,r3,8a60 <___vfprintf_internal_r+0x2b0>
    8a54:	a5000044 	addi	r20,r20,1
    8a58:	21400005 	stb	r5,0(r4)
    8a5c:	a0bffa1e 	bne	r20,r2,8a48 <_gp+0xffff5c70>
    8a60:	a6c7c83a 	sub	r3,r20,sp
    8a64:	d8c00a15 	stw	r3,40(sp)
    8a68:	d8c00a17 	ldw	r3,40(sp)
    8a6c:	50d3883a 	add	r9,r10,r3
    8a70:	d8c00b17 	ldw	r3,44(sp)
    8a74:	8a6dc83a 	sub	r22,r17,r9
    8a78:	18001726 	beq	r3,zero,8ad8 <___vfprintf_internal_r+0x328>
    8a7c:	50000a26 	beq	r10,zero,8aa8 <___vfprintf_internal_r+0x2f8>
    8a80:	00800b44 	movi	r2,45
    8a84:	d8800805 	stb	r2,32(sp)
    8a88:	e0800117 	ldw	r2,4(fp)
    8a8c:	01c00044 	movi	r7,1
    8a90:	d9800804 	addi	r6,sp,32
    8a94:	e00b883a 	mov	r5,fp
    8a98:	9809883a 	mov	r4,r19
    8a9c:	103ee83a 	callr	r2
    8aa0:	10004d1e 	bne	r2,zero,8bd8 <___vfprintf_internal_r+0x428>
    8aa4:	84000044 	addi	r16,r16,1
    8aa8:	0580070e 	bge	zero,r22,8ac8 <___vfprintf_internal_r+0x318>
    8aac:	b00f883a 	mov	r7,r22
    8ab0:	01800c04 	movi	r6,48
    8ab4:	e00b883a 	mov	r5,fp
    8ab8:	9809883a 	mov	r4,r19
    8abc:	00087440 	call	8744 <print_repeat>
    8ac0:	1000451e 	bne	r2,zero,8bd8 <___vfprintf_internal_r+0x428>
    8ac4:	85a1883a 	add	r16,r16,r22
    8ac8:	d8c00a17 	ldw	r3,40(sp)
    8acc:	a013883a 	mov	r9,r20
    8ad0:	1d2dc83a 	sub	r22,r3,r20
    8ad4:	00002206 	br	8b60 <___vfprintf_internal_r+0x3b0>
    8ad8:	0580090e 	bge	zero,r22,8b00 <___vfprintf_internal_r+0x350>
    8adc:	b00f883a 	mov	r7,r22
    8ae0:	01800804 	movi	r6,32
    8ae4:	e00b883a 	mov	r5,fp
    8ae8:	9809883a 	mov	r4,r19
    8aec:	da801015 	stw	r10,64(sp)
    8af0:	00087440 	call	8744 <print_repeat>
    8af4:	da801017 	ldw	r10,64(sp)
    8af8:	1000371e 	bne	r2,zero,8bd8 <___vfprintf_internal_r+0x428>
    8afc:	85a1883a 	add	r16,r16,r22
    8b00:	503ff126 	beq	r10,zero,8ac8 <_gp+0xffff5cf0>
    8b04:	00800b44 	movi	r2,45
    8b08:	d8800805 	stb	r2,32(sp)
    8b0c:	e0800117 	ldw	r2,4(fp)
    8b10:	01c00044 	movi	r7,1
    8b14:	d9800804 	addi	r6,sp,32
    8b18:	e00b883a 	mov	r5,fp
    8b1c:	9809883a 	mov	r4,r19
    8b20:	103ee83a 	callr	r2
    8b24:	10002c1e 	bne	r2,zero,8bd8 <___vfprintf_internal_r+0x428>
    8b28:	84000044 	addi	r16,r16,1
    8b2c:	003fe606 	br	8ac8 <_gp+0xffff5cf0>
    8b30:	4a7fffc4 	addi	r9,r9,-1
    8b34:	48800003 	ldbu	r2,0(r9)
    8b38:	01c00044 	movi	r7,1
    8b3c:	d9800804 	addi	r6,sp,32
    8b40:	d8800805 	stb	r2,32(sp)
    8b44:	e0800117 	ldw	r2,4(fp)
    8b48:	e00b883a 	mov	r5,fp
    8b4c:	da401015 	stw	r9,64(sp)
    8b50:	9809883a 	mov	r4,r19
    8b54:	103ee83a 	callr	r2
    8b58:	da401017 	ldw	r9,64(sp)
    8b5c:	10001e1e 	bne	r2,zero,8bd8 <___vfprintf_internal_r+0x428>
    8b60:	8245c83a 	sub	r2,r16,r9
    8b64:	4d89883a 	add	r4,r9,r22
    8b68:	a085883a 	add	r2,r20,r2
    8b6c:	013ff016 	blt	zero,r4,8b30 <_gp+0xffff5d58>
    8b70:	1021883a 	mov	r16,r2
    8b74:	dd800d17 	ldw	r22,52(sp)
    8b78:	00004406 	br	8c8c <___vfprintf_internal_r+0x4dc>
    8b7c:	00800044 	movi	r2,1
    8b80:	1440080e 	bge	r2,r17,8ba4 <___vfprintf_internal_r+0x3f4>
    8b84:	8d3fffc4 	addi	r20,r17,-1
    8b88:	a00f883a 	mov	r7,r20
    8b8c:	01800804 	movi	r6,32
    8b90:	e00b883a 	mov	r5,fp
    8b94:	9809883a 	mov	r4,r19
    8b98:	00087440 	call	8744 <print_repeat>
    8b9c:	10000e1e 	bne	r2,zero,8bd8 <___vfprintf_internal_r+0x428>
    8ba0:	8521883a 	add	r16,r16,r20
    8ba4:	b0800017 	ldw	r2,0(r22)
    8ba8:	01c00044 	movi	r7,1
    8bac:	d80d883a 	mov	r6,sp
    8bb0:	d8800005 	stb	r2,0(sp)
    8bb4:	e0800117 	ldw	r2,4(fp)
    8bb8:	e00b883a 	mov	r5,fp
    8bbc:	9809883a 	mov	r4,r19
    8bc0:	b5000104 	addi	r20,r22,4
    8bc4:	103ee83a 	callr	r2
    8bc8:	1000031e 	bne	r2,zero,8bd8 <___vfprintf_internal_r+0x428>
    8bcc:	84000044 	addi	r16,r16,1
    8bd0:	a02d883a 	mov	r22,r20
    8bd4:	00002d06 	br	8c8c <___vfprintf_internal_r+0x4dc>
    8bd8:	00bfffc4 	movi	r2,-1
    8bdc:	00003106 	br	8ca4 <___vfprintf_internal_r+0x4f4>
    8be0:	b5000017 	ldw	r20,0(r22)
    8be4:	b0c00104 	addi	r3,r22,4
    8be8:	d8c00a15 	stw	r3,40(sp)
    8bec:	a009883a 	mov	r4,r20
    8bf0:	00087280 	call	8728 <strlen>
    8bf4:	8893c83a 	sub	r9,r17,r2
    8bf8:	102d883a 	mov	r22,r2
    8bfc:	0240090e 	bge	zero,r9,8c24 <___vfprintf_internal_r+0x474>
    8c00:	480f883a 	mov	r7,r9
    8c04:	01800804 	movi	r6,32
    8c08:	e00b883a 	mov	r5,fp
    8c0c:	9809883a 	mov	r4,r19
    8c10:	da401015 	stw	r9,64(sp)
    8c14:	00087440 	call	8744 <print_repeat>
    8c18:	da401017 	ldw	r9,64(sp)
    8c1c:	103fee1e 	bne	r2,zero,8bd8 <_gp+0xffff5e00>
    8c20:	8261883a 	add	r16,r16,r9
    8c24:	e0800117 	ldw	r2,4(fp)
    8c28:	b00f883a 	mov	r7,r22
    8c2c:	a00d883a 	mov	r6,r20
    8c30:	e00b883a 	mov	r5,fp
    8c34:	9809883a 	mov	r4,r19
    8c38:	103ee83a 	callr	r2
    8c3c:	103fe61e 	bne	r2,zero,8bd8 <_gp+0xffff5e00>
    8c40:	85a1883a 	add	r16,r16,r22
    8c44:	dd800a17 	ldw	r22,40(sp)
    8c48:	00001006 	br	8c8c <___vfprintf_internal_r+0x4dc>
    8c4c:	05c00044 	movi	r23,1
    8c50:	04bfffc4 	movi	r18,-1
    8c54:	d8000e15 	stw	zero,56(sp)
    8c58:	05400284 	movi	r21,10
    8c5c:	9023883a 	mov	r17,r18
    8c60:	d8000c15 	stw	zero,48(sp)
    8c64:	d8000b15 	stw	zero,44(sp)
    8c68:	b829883a 	mov	r20,r23
    8c6c:	00000806 	br	8c90 <___vfprintf_internal_r+0x4e0>
    8c70:	dd000b15 	stw	r20,44(sp)
    8c74:	05000084 	movi	r20,2
    8c78:	00000506 	br	8c90 <___vfprintf_internal_r+0x4e0>
    8c7c:	00c00044 	movi	r3,1
    8c80:	d8c00c15 	stw	r3,48(sp)
    8c84:	050000c4 	movi	r20,3
    8c88:	00000106 	br	8c90 <___vfprintf_internal_r+0x4e0>
    8c8c:	0029883a 	mov	r20,zero
    8c90:	d8c00f17 	ldw	r3,60(sp)
    8c94:	18c00044 	addi	r3,r3,1
    8c98:	d8c00f15 	stw	r3,60(sp)
    8c9c:	003ede06 	br	8818 <_gp+0xffff5a40>
    8ca0:	8005883a 	mov	r2,r16
    8ca4:	dfc01a17 	ldw	ra,104(sp)
    8ca8:	df001917 	ldw	fp,100(sp)
    8cac:	ddc01817 	ldw	r23,96(sp)
    8cb0:	dd801717 	ldw	r22,92(sp)
    8cb4:	dd401617 	ldw	r21,88(sp)
    8cb8:	dd001517 	ldw	r20,84(sp)
    8cbc:	dcc01417 	ldw	r19,80(sp)
    8cc0:	dc801317 	ldw	r18,76(sp)
    8cc4:	dc401217 	ldw	r17,72(sp)
    8cc8:	dc001117 	ldw	r16,68(sp)
    8ccc:	dec01b04 	addi	sp,sp,108
    8cd0:	f800283a 	ret

00008cd4 <__vfprintf_internal>:
    8cd4:	00800074 	movhi	r2,1
    8cd8:	10ab7704 	addi	r2,r2,-21028
    8cdc:	300f883a 	mov	r7,r6
    8ce0:	280d883a 	mov	r6,r5
    8ce4:	200b883a 	mov	r5,r4
    8ce8:	11000017 	ldw	r4,0(r2)
    8cec:	00087b01 	jmpi	87b0 <___vfprintf_internal_r>

00008cf0 <__sfvwrite_small_dev>:
    8cf0:	2880000b 	ldhu	r2,0(r5)
    8cf4:	1080020c 	andi	r2,r2,8
    8cf8:	10002126 	beq	r2,zero,8d80 <__sfvwrite_small_dev+0x90>
    8cfc:	2880008f 	ldh	r2,2(r5)
    8d00:	defffa04 	addi	sp,sp,-24
    8d04:	dc000015 	stw	r16,0(sp)
    8d08:	dfc00515 	stw	ra,20(sp)
    8d0c:	dd000415 	stw	r20,16(sp)
    8d10:	dcc00315 	stw	r19,12(sp)
    8d14:	dc800215 	stw	r18,8(sp)
    8d18:	dc400115 	stw	r17,4(sp)
    8d1c:	2821883a 	mov	r16,r5
    8d20:	10001216 	blt	r2,zero,8d6c <__sfvwrite_small_dev+0x7c>
    8d24:	2027883a 	mov	r19,r4
    8d28:	3025883a 	mov	r18,r6
    8d2c:	3823883a 	mov	r17,r7
    8d30:	05010004 	movi	r20,1024
    8d34:	04400b0e 	bge	zero,r17,8d64 <__sfvwrite_small_dev+0x74>
    8d38:	880f883a 	mov	r7,r17
    8d3c:	a440010e 	bge	r20,r17,8d44 <__sfvwrite_small_dev+0x54>
    8d40:	01c10004 	movi	r7,1024
    8d44:	8140008f 	ldh	r5,2(r16)
    8d48:	900d883a 	mov	r6,r18
    8d4c:	9809883a 	mov	r4,r19
    8d50:	0008da80 	call	8da8 <_write_r>
    8d54:	0080050e 	bge	zero,r2,8d6c <__sfvwrite_small_dev+0x7c>
    8d58:	88a3c83a 	sub	r17,r17,r2
    8d5c:	90a5883a 	add	r18,r18,r2
    8d60:	003ff406 	br	8d34 <_gp+0xffff5f5c>
    8d64:	0005883a 	mov	r2,zero
    8d68:	00000706 	br	8d88 <__sfvwrite_small_dev+0x98>
    8d6c:	8080000b 	ldhu	r2,0(r16)
    8d70:	10801014 	ori	r2,r2,64
    8d74:	8080000d 	sth	r2,0(r16)
    8d78:	00bfffc4 	movi	r2,-1
    8d7c:	00000206 	br	8d88 <__sfvwrite_small_dev+0x98>
    8d80:	00bfffc4 	movi	r2,-1
    8d84:	f800283a 	ret
    8d88:	dfc00517 	ldw	ra,20(sp)
    8d8c:	dd000417 	ldw	r20,16(sp)
    8d90:	dcc00317 	ldw	r19,12(sp)
    8d94:	dc800217 	ldw	r18,8(sp)
    8d98:	dc400117 	ldw	r17,4(sp)
    8d9c:	dc000017 	ldw	r16,0(sp)
    8da0:	dec00604 	addi	sp,sp,24
    8da4:	f800283a 	ret

00008da8 <_write_r>:
    8da8:	defffd04 	addi	sp,sp,-12
    8dac:	dc000015 	stw	r16,0(sp)
    8db0:	04000074 	movhi	r16,1
    8db4:	dc400115 	stw	r17,4(sp)
    8db8:	842c3904 	addi	r16,r16,-20252
    8dbc:	2023883a 	mov	r17,r4
    8dc0:	2809883a 	mov	r4,r5
    8dc4:	300b883a 	mov	r5,r6
    8dc8:	380d883a 	mov	r6,r7
    8dcc:	dfc00215 	stw	ra,8(sp)
    8dd0:	80000015 	stw	zero,0(r16)
    8dd4:	00091880 	call	9188 <write>
    8dd8:	00ffffc4 	movi	r3,-1
    8ddc:	10c0031e 	bne	r2,r3,8dec <_write_r+0x44>
    8de0:	80c00017 	ldw	r3,0(r16)
    8de4:	18000126 	beq	r3,zero,8dec <_write_r+0x44>
    8de8:	88c00015 	stw	r3,0(r17)
    8dec:	dfc00217 	ldw	ra,8(sp)
    8df0:	dc400117 	ldw	r17,4(sp)
    8df4:	dc000017 	ldw	r16,0(sp)
    8df8:	dec00304 	addi	sp,sp,12
    8dfc:	f800283a 	ret

00008e00 <__divsi3>:
    8e00:	20001b16 	blt	r4,zero,8e70 <__divsi3+0x70>
    8e04:	000f883a 	mov	r7,zero
    8e08:	28001616 	blt	r5,zero,8e64 <__divsi3+0x64>
    8e0c:	200d883a 	mov	r6,r4
    8e10:	29001a2e 	bgeu	r5,r4,8e7c <__divsi3+0x7c>
    8e14:	00800804 	movi	r2,32
    8e18:	00c00044 	movi	r3,1
    8e1c:	00000106 	br	8e24 <__divsi3+0x24>
    8e20:	10000d26 	beq	r2,zero,8e58 <__divsi3+0x58>
    8e24:	294b883a 	add	r5,r5,r5
    8e28:	10bfffc4 	addi	r2,r2,-1
    8e2c:	18c7883a 	add	r3,r3,r3
    8e30:	293ffb36 	bltu	r5,r4,8e20 <_gp+0xffff6048>
    8e34:	0005883a 	mov	r2,zero
    8e38:	18000726 	beq	r3,zero,8e58 <__divsi3+0x58>
    8e3c:	0005883a 	mov	r2,zero
    8e40:	31400236 	bltu	r6,r5,8e4c <__divsi3+0x4c>
    8e44:	314dc83a 	sub	r6,r6,r5
    8e48:	10c4b03a 	or	r2,r2,r3
    8e4c:	1806d07a 	srli	r3,r3,1
    8e50:	280ad07a 	srli	r5,r5,1
    8e54:	183ffa1e 	bne	r3,zero,8e40 <_gp+0xffff6068>
    8e58:	38000126 	beq	r7,zero,8e60 <__divsi3+0x60>
    8e5c:	0085c83a 	sub	r2,zero,r2
    8e60:	f800283a 	ret
    8e64:	014bc83a 	sub	r5,zero,r5
    8e68:	39c0005c 	xori	r7,r7,1
    8e6c:	003fe706 	br	8e0c <_gp+0xffff6034>
    8e70:	0109c83a 	sub	r4,zero,r4
    8e74:	01c00044 	movi	r7,1
    8e78:	003fe306 	br	8e08 <_gp+0xffff6030>
    8e7c:	00c00044 	movi	r3,1
    8e80:	003fee06 	br	8e3c <_gp+0xffff6064>

00008e84 <__modsi3>:
    8e84:	20001716 	blt	r4,zero,8ee4 <__modsi3+0x60>
    8e88:	000f883a 	mov	r7,zero
    8e8c:	2005883a 	mov	r2,r4
    8e90:	28001216 	blt	r5,zero,8edc <__modsi3+0x58>
    8e94:	2900162e 	bgeu	r5,r4,8ef0 <__modsi3+0x6c>
    8e98:	01800804 	movi	r6,32
    8e9c:	00c00044 	movi	r3,1
    8ea0:	00000106 	br	8ea8 <__modsi3+0x24>
    8ea4:	30000a26 	beq	r6,zero,8ed0 <__modsi3+0x4c>
    8ea8:	294b883a 	add	r5,r5,r5
    8eac:	31bfffc4 	addi	r6,r6,-1
    8eb0:	18c7883a 	add	r3,r3,r3
    8eb4:	293ffb36 	bltu	r5,r4,8ea4 <_gp+0xffff60cc>
    8eb8:	18000526 	beq	r3,zero,8ed0 <__modsi3+0x4c>
    8ebc:	1806d07a 	srli	r3,r3,1
    8ec0:	11400136 	bltu	r2,r5,8ec8 <__modsi3+0x44>
    8ec4:	1145c83a 	sub	r2,r2,r5
    8ec8:	280ad07a 	srli	r5,r5,1
    8ecc:	183ffb1e 	bne	r3,zero,8ebc <_gp+0xffff60e4>
    8ed0:	38000126 	beq	r7,zero,8ed8 <__modsi3+0x54>
    8ed4:	0085c83a 	sub	r2,zero,r2
    8ed8:	f800283a 	ret
    8edc:	014bc83a 	sub	r5,zero,r5
    8ee0:	003fec06 	br	8e94 <_gp+0xffff60bc>
    8ee4:	0109c83a 	sub	r4,zero,r4
    8ee8:	01c00044 	movi	r7,1
    8eec:	003fe706 	br	8e8c <_gp+0xffff60b4>
    8ef0:	00c00044 	movi	r3,1
    8ef4:	003ff106 	br	8ebc <_gp+0xffff60e4>

00008ef8 <__udivsi3>:
    8ef8:	200d883a 	mov	r6,r4
    8efc:	2900152e 	bgeu	r5,r4,8f54 <__udivsi3+0x5c>
    8f00:	28001416 	blt	r5,zero,8f54 <__udivsi3+0x5c>
    8f04:	00800804 	movi	r2,32
    8f08:	00c00044 	movi	r3,1
    8f0c:	00000206 	br	8f18 <__udivsi3+0x20>
    8f10:	10000e26 	beq	r2,zero,8f4c <__udivsi3+0x54>
    8f14:	28000516 	blt	r5,zero,8f2c <__udivsi3+0x34>
    8f18:	294b883a 	add	r5,r5,r5
    8f1c:	10bfffc4 	addi	r2,r2,-1
    8f20:	18c7883a 	add	r3,r3,r3
    8f24:	293ffa36 	bltu	r5,r4,8f10 <_gp+0xffff6138>
    8f28:	18000826 	beq	r3,zero,8f4c <__udivsi3+0x54>
    8f2c:	0005883a 	mov	r2,zero
    8f30:	31400236 	bltu	r6,r5,8f3c <__udivsi3+0x44>
    8f34:	314dc83a 	sub	r6,r6,r5
    8f38:	10c4b03a 	or	r2,r2,r3
    8f3c:	1806d07a 	srli	r3,r3,1
    8f40:	280ad07a 	srli	r5,r5,1
    8f44:	183ffa1e 	bne	r3,zero,8f30 <_gp+0xffff6158>
    8f48:	f800283a 	ret
    8f4c:	0005883a 	mov	r2,zero
    8f50:	f800283a 	ret
    8f54:	00c00044 	movi	r3,1
    8f58:	003ff406 	br	8f2c <_gp+0xffff6154>

00008f5c <__umodsi3>:
    8f5c:	2005883a 	mov	r2,r4
    8f60:	2900122e 	bgeu	r5,r4,8fac <__umodsi3+0x50>
    8f64:	28001116 	blt	r5,zero,8fac <__umodsi3+0x50>
    8f68:	01800804 	movi	r6,32
    8f6c:	00c00044 	movi	r3,1
    8f70:	00000206 	br	8f7c <__umodsi3+0x20>
    8f74:	30000c26 	beq	r6,zero,8fa8 <__umodsi3+0x4c>
    8f78:	28000516 	blt	r5,zero,8f90 <__umodsi3+0x34>
    8f7c:	294b883a 	add	r5,r5,r5
    8f80:	31bfffc4 	addi	r6,r6,-1
    8f84:	18c7883a 	add	r3,r3,r3
    8f88:	293ffa36 	bltu	r5,r4,8f74 <_gp+0xffff619c>
    8f8c:	18000626 	beq	r3,zero,8fa8 <__umodsi3+0x4c>
    8f90:	1806d07a 	srli	r3,r3,1
    8f94:	11400136 	bltu	r2,r5,8f9c <__umodsi3+0x40>
    8f98:	1145c83a 	sub	r2,r2,r5
    8f9c:	280ad07a 	srli	r5,r5,1
    8fa0:	183ffb1e 	bne	r3,zero,8f90 <_gp+0xffff61b8>
    8fa4:	f800283a 	ret
    8fa8:	f800283a 	ret
    8fac:	00c00044 	movi	r3,1
    8fb0:	003ff706 	br	8f90 <_gp+0xffff61b8>

00008fb4 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
    8fb4:	defffc04 	addi	sp,sp,-16
    8fb8:	df000315 	stw	fp,12(sp)
    8fbc:	df000304 	addi	fp,sp,12
    8fc0:	e13ffd15 	stw	r4,-12(fp)
    8fc4:	e17ffe15 	stw	r5,-8(fp)
    8fc8:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
    8fcc:	e0fffe17 	ldw	r3,-8(fp)
    8fd0:	e0bffd17 	ldw	r2,-12(fp)
    8fd4:	18800c26 	beq	r3,r2,9008 <alt_load_section+0x54>
  {
    while( to != end )
    8fd8:	00000806 	br	8ffc <alt_load_section+0x48>
    {
      *to++ = *from++;
    8fdc:	e0bffe17 	ldw	r2,-8(fp)
    8fe0:	10c00104 	addi	r3,r2,4
    8fe4:	e0fffe15 	stw	r3,-8(fp)
    8fe8:	e0fffd17 	ldw	r3,-12(fp)
    8fec:	19000104 	addi	r4,r3,4
    8ff0:	e13ffd15 	stw	r4,-12(fp)
    8ff4:	18c00017 	ldw	r3,0(r3)
    8ff8:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
    8ffc:	e0fffe17 	ldw	r3,-8(fp)
    9000:	e0bfff17 	ldw	r2,-4(fp)
    9004:	18bff51e 	bne	r3,r2,8fdc <_gp+0xffff6204>
    {
      *to++ = *from++;
    }
  }
}
    9008:	0001883a 	nop
    900c:	e037883a 	mov	sp,fp
    9010:	df000017 	ldw	fp,0(sp)
    9014:	dec00104 	addi	sp,sp,4
    9018:	f800283a 	ret

0000901c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    901c:	defffe04 	addi	sp,sp,-8
    9020:	dfc00115 	stw	ra,4(sp)
    9024:	df000015 	stw	fp,0(sp)
    9028:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
    902c:	01800074 	movhi	r6,1
    9030:	31ab8104 	addi	r6,r6,-20988
    9034:	01400074 	movhi	r5,1
    9038:	296ac904 	addi	r5,r5,-21724
    903c:	01000074 	movhi	r4,1
    9040:	212b8104 	addi	r4,r4,-20988
    9044:	0008fb40 	call	8fb4 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
    9048:	01800074 	movhi	r6,1
    904c:	31a09104 	addi	r6,r6,-32188
    9050:	01400074 	movhi	r5,1
    9054:	29600804 	addi	r5,r5,-32736
    9058:	01000074 	movhi	r4,1
    905c:	21200804 	addi	r4,r4,-32736
    9060:	0008fb40 	call	8fb4 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
    9064:	01800074 	movhi	r6,1
    9068:	31aac904 	addi	r6,r6,-21724
    906c:	01400074 	movhi	r5,1
    9070:	296a9904 	addi	r5,r5,-21916
    9074:	01000074 	movhi	r4,1
    9078:	212a9904 	addi	r4,r4,-21916
    907c:	0008fb40 	call	8fb4 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    9080:	00098d40 	call	98d4 <alt_dcache_flush_all>
  alt_icache_flush_all();
    9084:	0009ae80 	call	9ae8 <alt_icache_flush_all>
}
    9088:	0001883a 	nop
    908c:	e037883a 	mov	sp,fp
    9090:	dfc00117 	ldw	ra,4(sp)
    9094:	df000017 	ldw	fp,0(sp)
    9098:	dec00204 	addi	sp,sp,8
    909c:	f800283a 	ret

000090a0 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    90a0:	defffd04 	addi	sp,sp,-12
    90a4:	dfc00215 	stw	ra,8(sp)
    90a8:	df000115 	stw	fp,4(sp)
    90ac:	df000104 	addi	fp,sp,4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    90b0:	0009883a 	mov	r4,zero
    90b4:	00092b40 	call	92b4 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
    90b8:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    90bc:	00092ec0 	call	92ec <alt_sys_init>
   * devices be present (not equal to /dev/null) and if direct drivers
   * aren't being used.
   */

    ALT_LOG_PRINT_BOOT("[alt_main.c] Redirecting IO.\r\n");
    alt_io_redirect(ALT_STDOUT, ALT_STDIN, ALT_STDERR);
    90c0:	01800074 	movhi	r6,1
    90c4:	31aabc04 	addi	r6,r6,-21776
    90c8:	01400074 	movhi	r5,1
    90cc:	296abc04 	addi	r5,r5,-21776
    90d0:	01000074 	movhi	r4,1
    90d4:	212abc04 	addi	r4,r4,-21776
    90d8:	0009e800 	call	9e80 <alt_io_redirect>
  /* 
   * Call the C++ constructors 
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling C++ constructors.\r\n");
  _do_ctors ();
    90dc:	0009a280 	call	9a28 <_do_ctors>
   * redefined as _exit()). This is in the interest of reducing code footprint,
   * in that the atexit() overhead is removed when it's not needed.
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling atexit.\r\n");
  atexit (_do_dtors);
    90e0:	01000074 	movhi	r4,1
    90e4:	2126a204 	addi	r4,r4,-25976
    90e8:	000a6e40 	call	a6e4 <atexit>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
#else
  result = main (alt_argc, alt_argv, alt_envp);
    90ec:	d0a0c417 	ldw	r2,-31984(gp)
    90f0:	d0e0c517 	ldw	r3,-31980(gp)
    90f4:	d120c617 	ldw	r4,-31976(gp)
    90f8:	200d883a 	mov	r6,r4
    90fc:	180b883a 	mov	r5,r3
    9100:	1009883a 	mov	r4,r2
    9104:	00082900 	call	8290 <main>
    9108:	e0bfff15 	stw	r2,-4(fp)
  close(STDOUT_FILENO);
    910c:	01000044 	movi	r4,1
    9110:	00098040 	call	9804 <close>
  exit (result);
    9114:	e13fff17 	ldw	r4,-4(fp)
    9118:	000a6f80 	call	a6f8 <exit>

0000911c <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
    911c:	defffd04 	addi	sp,sp,-12
    9120:	dfc00215 	stw	ra,8(sp)
    9124:	df000115 	stw	fp,4(sp)
    9128:	df000104 	addi	fp,sp,4
    912c:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
    9130:	e13fff17 	ldw	r4,-4(fp)
    9134:	00096700 	call	9670 <alt_busy_sleep>
}
    9138:	e037883a 	mov	sp,fp
    913c:	dfc00117 	ldw	ra,4(sp)
    9140:	df000017 	ldw	fp,0(sp)
    9144:	dec00204 	addi	sp,sp,8
    9148:	f800283a 	ret

0000914c <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    914c:	defffe04 	addi	sp,sp,-8
    9150:	dfc00115 	stw	ra,4(sp)
    9154:	df000015 	stw	fp,0(sp)
    9158:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    915c:	d0a00717 	ldw	r2,-32740(gp)
    9160:	10000326 	beq	r2,zero,9170 <alt_get_errno+0x24>
    9164:	d0a00717 	ldw	r2,-32740(gp)
    9168:	103ee83a 	callr	r2
    916c:	00000106 	br	9174 <alt_get_errno+0x28>
    9170:	d0a0c304 	addi	r2,gp,-31988
}
    9174:	e037883a 	mov	sp,fp
    9178:	dfc00117 	ldw	ra,4(sp)
    917c:	df000017 	ldw	fp,0(sp)
    9180:	dec00204 	addi	sp,sp,8
    9184:	f800283a 	ret

00009188 <write>:
}

#else /* !ALT_USE_DIRECT_DRIVERS */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    9188:	defff904 	addi	sp,sp,-28
    918c:	dfc00615 	stw	ra,24(sp)
    9190:	df000515 	stw	fp,20(sp)
    9194:	df000504 	addi	fp,sp,20
    9198:	e13ffd15 	stw	r4,-12(fp)
    919c:	e17ffe15 	stw	r5,-8(fp)
    91a0:	e1bfff15 	stw	r6,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (file < 0) ? NULL : &alt_fd_list[file];
    91a4:	e0bffd17 	ldw	r2,-12(fp)
    91a8:	10000616 	blt	r2,zero,91c4 <write+0x3c>
    91ac:	e0bffd17 	ldw	r2,-12(fp)
    91b0:	10c00324 	muli	r3,r2,12
    91b4:	00800074 	movhi	r2,1
    91b8:	10ab1604 	addi	r2,r2,-21416
    91bc:	1885883a 	add	r2,r3,r2
    91c0:	00000106 	br	91c8 <write+0x40>
    91c4:	0005883a 	mov	r2,zero
    91c8:	e0bffb15 	stw	r2,-20(fp)
  
  if (fd)
    91cc:	e0bffb17 	ldw	r2,-20(fp)
    91d0:	10002126 	beq	r2,zero,9258 <write+0xd0>
     * If the file has not been opened with write access, or if the driver does
     * not provide an implementation of write(), generate an error. Otherwise
     * call the drivers write() function to process the request.
     */

    if (((fd->fd_flags & O_ACCMODE) != O_RDONLY) && fd->dev->write)
    91d4:	e0bffb17 	ldw	r2,-20(fp)
    91d8:	10800217 	ldw	r2,8(r2)
    91dc:	108000cc 	andi	r2,r2,3
    91e0:	10001826 	beq	r2,zero,9244 <write+0xbc>
    91e4:	e0bffb17 	ldw	r2,-20(fp)
    91e8:	10800017 	ldw	r2,0(r2)
    91ec:	10800617 	ldw	r2,24(r2)
    91f0:	10001426 	beq	r2,zero,9244 <write+0xbc>
    {
      
      /* ALT_LOG - see altera_hal/HAL/inc/sys/alt_log_printf.h */
      ALT_LOG_WRITE_FUNCTION(ptr,len);

      if ((rval = fd->dev->write(fd, ptr, len)) < 0)
    91f4:	e0bffb17 	ldw	r2,-20(fp)
    91f8:	10800017 	ldw	r2,0(r2)
    91fc:	10800617 	ldw	r2,24(r2)
    9200:	e0ffff17 	ldw	r3,-4(fp)
    9204:	180d883a 	mov	r6,r3
    9208:	e17ffe17 	ldw	r5,-8(fp)
    920c:	e13ffb17 	ldw	r4,-20(fp)
    9210:	103ee83a 	callr	r2
    9214:	e0bffc15 	stw	r2,-16(fp)
    9218:	e0bffc17 	ldw	r2,-16(fp)
    921c:	1000070e 	bge	r2,zero,923c <write+0xb4>
      {
        ALT_ERRNO = -rval;
    9220:	000914c0 	call	914c <alt_get_errno>
    9224:	1007883a 	mov	r3,r2
    9228:	e0bffc17 	ldw	r2,-16(fp)
    922c:	0085c83a 	sub	r2,zero,r2
    9230:	18800015 	stw	r2,0(r3)
        return -1;
    9234:	00bfffc4 	movi	r2,-1
    9238:	00000c06 	br	926c <write+0xe4>
      }
      return rval;
    923c:	e0bffc17 	ldw	r2,-16(fp)
    9240:	00000a06 	br	926c <write+0xe4>
    }
    else
    {
      ALT_ERRNO = EACCES;
    9244:	000914c0 	call	914c <alt_get_errno>
    9248:	1007883a 	mov	r3,r2
    924c:	00800344 	movi	r2,13
    9250:	18800015 	stw	r2,0(r3)
    9254:	00000406 	br	9268 <write+0xe0>
    }
  }
  else  
  {
    ALT_ERRNO = EBADFD;
    9258:	000914c0 	call	914c <alt_get_errno>
    925c:	1007883a 	mov	r3,r2
    9260:	00801444 	movi	r2,81
    9264:	18800015 	stw	r2,0(r3)
  }
  return -1;
    9268:	00bfffc4 	movi	r2,-1
}
    926c:	e037883a 	mov	sp,fp
    9270:	dfc00117 	ldw	ra,4(sp)
    9274:	df000017 	ldw	fp,0(sp)
    9278:	dec00204 	addi	sp,sp,8
    927c:	f800283a 	ret

00009280 <alt_dev_reg>:
 */

extern int alt_fs_reg  (alt_dev* dev); 

static ALT_INLINE int alt_dev_reg (alt_dev* dev)
{
    9280:	defffd04 	addi	sp,sp,-12
    9284:	dfc00215 	stw	ra,8(sp)
    9288:	df000115 	stw	fp,4(sp)
    928c:	df000104 	addi	fp,sp,4
    9290:	e13fff15 	stw	r4,-4(fp)
  extern alt_llist alt_dev_list;

  return alt_dev_llist_insert ((alt_dev_llist*) dev, &alt_dev_list);
    9294:	d1600404 	addi	r5,gp,-32752
    9298:	e13fff17 	ldw	r4,-4(fp)
    929c:	00099840 	call	9984 <alt_dev_llist_insert>
}
    92a0:	e037883a 	mov	sp,fp
    92a4:	dfc00117 	ldw	ra,4(sp)
    92a8:	df000017 	ldw	fp,0(sp)
    92ac:	dec00204 	addi	sp,sp,8
    92b0:	f800283a 	ret

000092b4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    92b4:	defffd04 	addi	sp,sp,-12
    92b8:	dfc00215 	stw	ra,8(sp)
    92bc:	df000115 	stw	fp,4(sp)
    92c0:	df000104 	addi	fp,sp,4
    92c4:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    92c8:	000a3580 	call	a358 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    92cc:	00800044 	movi	r2,1
    92d0:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    92d4:	0001883a 	nop
    92d8:	e037883a 	mov	sp,fp
    92dc:	dfc00117 	ldw	ra,4(sp)
    92e0:	df000017 	ldw	fp,0(sp)
    92e4:	dec00204 	addi	sp,sp,8
    92e8:	f800283a 	ret

000092ec <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    92ec:	defffe04 	addi	sp,sp,-8
    92f0:	dfc00115 	stw	ra,4(sp)
    92f4:	df000015 	stw	fp,0(sp)
    92f8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_TIMER_INIT ( TIMER_0, timer_0);
    92fc:	01c0fa04 	movi	r7,1000
    9300:	01800044 	movi	r6,1
    9304:	000b883a 	mov	r5,zero
    9308:	01000074 	movhi	r4,1
    930c:	21040004 	addi	r4,r4,4096
    9310:	00095f40 	call	95f4 <alt_avalon_timer_sc_init>
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
    9314:	01000074 	movhi	r4,1
    9318:	212b0104 	addi	r4,r4,-21500
    931c:	00092800 	call	9280 <alt_dev_reg>
    ALTERA_AVALON_SYSID_QSYS_INIT ( SYSID_QSYS_0, sysid_qsys_0);
    9320:	0001883a 	nop
}
    9324:	0001883a 	nop
    9328:	e037883a 	mov	sp,fp
    932c:	dfc00117 	ldw	ra,4(sp)
    9330:	df000017 	ldw	fp,0(sp)
    9334:	dec00204 	addi	sp,sp,8
    9338:	f800283a 	ret

0000933c <altera_avalon_jtag_uart_read_fd>:
 *
 */

int 
altera_avalon_jtag_uart_read_fd(alt_fd* fd, char* buffer, int space)
{
    933c:	defffa04 	addi	sp,sp,-24
    9340:	dfc00515 	stw	ra,20(sp)
    9344:	df000415 	stw	fp,16(sp)
    9348:	df000404 	addi	fp,sp,16
    934c:	e13ffd15 	stw	r4,-12(fp)
    9350:	e17ffe15 	stw	r5,-8(fp)
    9354:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    9358:	e0bffd17 	ldw	r2,-12(fp)
    935c:	10800017 	ldw	r2,0(r2)
    9360:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_read(&dev->state, buffer, space,
    9364:	e0bffc17 	ldw	r2,-16(fp)
    9368:	10c00a04 	addi	r3,r2,40
    936c:	e0bffd17 	ldw	r2,-12(fp)
    9370:	10800217 	ldw	r2,8(r2)
    9374:	100f883a 	mov	r7,r2
    9378:	e1bfff17 	ldw	r6,-4(fp)
    937c:	e17ffe17 	ldw	r5,-8(fp)
    9380:	1809883a 	mov	r4,r3
    9384:	00093fc0 	call	93fc <altera_avalon_jtag_uart_read>
      fd->fd_flags);
}
    9388:	e037883a 	mov	sp,fp
    938c:	dfc00117 	ldw	ra,4(sp)
    9390:	df000017 	ldw	fp,0(sp)
    9394:	dec00204 	addi	sp,sp,8
    9398:	f800283a 	ret

0000939c <altera_avalon_jtag_uart_write_fd>:

int 
altera_avalon_jtag_uart_write_fd(alt_fd* fd, const char* buffer, int space)
{
    939c:	defffa04 	addi	sp,sp,-24
    93a0:	dfc00515 	stw	ra,20(sp)
    93a4:	df000415 	stw	fp,16(sp)
    93a8:	df000404 	addi	fp,sp,16
    93ac:	e13ffd15 	stw	r4,-12(fp)
    93b0:	e17ffe15 	stw	r5,-8(fp)
    93b4:	e1bfff15 	stw	r6,-4(fp)
    altera_avalon_jtag_uart_dev* dev = (altera_avalon_jtag_uart_dev*) fd->dev; 
    93b8:	e0bffd17 	ldw	r2,-12(fp)
    93bc:	10800017 	ldw	r2,0(r2)
    93c0:	e0bffc15 	stw	r2,-16(fp)

    return altera_avalon_jtag_uart_write(&dev->state, buffer, space,
    93c4:	e0bffc17 	ldw	r2,-16(fp)
    93c8:	10c00a04 	addi	r3,r2,40
    93cc:	e0bffd17 	ldw	r2,-12(fp)
    93d0:	10800217 	ldw	r2,8(r2)
    93d4:	100f883a 	mov	r7,r2
    93d8:	e1bfff17 	ldw	r6,-4(fp)
    93dc:	e17ffe17 	ldw	r5,-8(fp)
    93e0:	1809883a 	mov	r4,r3
    93e4:	00094e80 	call	94e8 <altera_avalon_jtag_uart_write>
      fd->fd_flags);
}
    93e8:	e037883a 	mov	sp,fp
    93ec:	dfc00117 	ldw	ra,4(sp)
    93f0:	df000017 	ldw	fp,0(sp)
    93f4:	dec00204 	addi	sp,sp,8
    93f8:	f800283a 	ret

000093fc <altera_avalon_jtag_uart_read>:
 */

int 
altera_avalon_jtag_uart_read(altera_avalon_jtag_uart_state* sp, 
  char* buffer, int space, int flags)
{
    93fc:	defff704 	addi	sp,sp,-36
    9400:	df000815 	stw	fp,32(sp)
    9404:	df000804 	addi	fp,sp,32
    9408:	e13ffc15 	stw	r4,-16(fp)
    940c:	e17ffd15 	stw	r5,-12(fp)
    9410:	e1bffe15 	stw	r6,-8(fp)
    9414:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    9418:	e0bffc17 	ldw	r2,-16(fp)
    941c:	10800017 	ldw	r2,0(r2)
    9420:	e0bff915 	stw	r2,-28(fp)

  char * ptr = buffer;
    9424:	e0bffd17 	ldw	r2,-12(fp)
    9428:	e0bff815 	stw	r2,-32(fp)
  char * end = buffer + space;
    942c:	e0bffe17 	ldw	r2,-8(fp)
    9430:	e0fffd17 	ldw	r3,-12(fp)
    9434:	1885883a 	add	r2,r3,r2
    9438:	e0bffa15 	stw	r2,-24(fp)

  while (ptr < end)
    943c:	00001206 	br	9488 <altera_avalon_jtag_uart_read+0x8c>
  {
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);
    9440:	e0bff917 	ldw	r2,-28(fp)
    9444:	10800037 	ldwio	r2,0(r2)
    9448:	e0bffb15 	stw	r2,-20(fp)

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
    944c:	e0bffb17 	ldw	r2,-20(fp)
    9450:	10a0000c 	andi	r2,r2,32768
    9454:	10000626 	beq	r2,zero,9470 <altera_avalon_jtag_uart_read+0x74>
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    9458:	e0bff817 	ldw	r2,-32(fp)
    945c:	10c00044 	addi	r3,r2,1
    9460:	e0fff815 	stw	r3,-32(fp)
    9464:	e0fffb17 	ldw	r3,-20(fp)
    9468:	10c00005 	stb	r3,0(r2)
    946c:	00000606 	br	9488 <altera_avalon_jtag_uart_read+0x8c>
    else if (ptr != buffer)
    9470:	e0fff817 	ldw	r3,-32(fp)
    9474:	e0bffd17 	ldw	r2,-12(fp)
    9478:	1880071e 	bne	r3,r2,9498 <altera_avalon_jtag_uart_read+0x9c>
      break;
    else if(flags & O_NONBLOCK)
    947c:	e0bfff17 	ldw	r2,-4(fp)
    9480:	1090000c 	andi	r2,r2,16384
    9484:	1000061e 	bne	r2,zero,94a0 <altera_avalon_jtag_uart_read+0xa4>
  unsigned int base = sp->base;

  char * ptr = buffer;
  char * end = buffer + space;

  while (ptr < end)
    9488:	e0fff817 	ldw	r3,-32(fp)
    948c:	e0bffa17 	ldw	r2,-24(fp)
    9490:	18bfeb36 	bltu	r3,r2,9440 <_gp+0xffff6668>
    9494:	00000306 	br	94a4 <altera_avalon_jtag_uart_read+0xa8>
    unsigned int data = IORD_ALTERA_AVALON_JTAG_UART_DATA(base);

    if (data & ALTERA_AVALON_JTAG_UART_DATA_RVALID_MSK)
      *ptr++ = (data & ALTERA_AVALON_JTAG_UART_DATA_DATA_MSK) >> ALTERA_AVALON_JTAG_UART_DATA_DATA_OFST;
    else if (ptr != buffer)
      break;
    9498:	0001883a 	nop
    949c:	00000106 	br	94a4 <altera_avalon_jtag_uart_read+0xa8>
    else if(flags & O_NONBLOCK)
      break;   
    94a0:	0001883a 	nop
    
  }

  if (ptr != buffer)
    94a4:	e0fff817 	ldw	r3,-32(fp)
    94a8:	e0bffd17 	ldw	r2,-12(fp)
    94ac:	18800426 	beq	r3,r2,94c0 <altera_avalon_jtag_uart_read+0xc4>
    return ptr - buffer;
    94b0:	e0fff817 	ldw	r3,-32(fp)
    94b4:	e0bffd17 	ldw	r2,-12(fp)
    94b8:	1885c83a 	sub	r2,r3,r2
    94bc:	00000606 	br	94d8 <altera_avalon_jtag_uart_read+0xdc>
  else if (flags & O_NONBLOCK)
    94c0:	e0bfff17 	ldw	r2,-4(fp)
    94c4:	1090000c 	andi	r2,r2,16384
    94c8:	10000226 	beq	r2,zero,94d4 <altera_avalon_jtag_uart_read+0xd8>
    return -EWOULDBLOCK;
    94cc:	00bffd44 	movi	r2,-11
    94d0:	00000106 	br	94d8 <altera_avalon_jtag_uart_read+0xdc>
  else
    return -EIO;
    94d4:	00bffec4 	movi	r2,-5
}
    94d8:	e037883a 	mov	sp,fp
    94dc:	df000017 	ldw	fp,0(sp)
    94e0:	dec00104 	addi	sp,sp,4
    94e4:	f800283a 	ret

000094e8 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
    94e8:	defff904 	addi	sp,sp,-28
    94ec:	df000615 	stw	fp,24(sp)
    94f0:	df000604 	addi	fp,sp,24
    94f4:	e13ffc15 	stw	r4,-16(fp)
    94f8:	e17ffd15 	stw	r5,-12(fp)
    94fc:	e1bffe15 	stw	r6,-8(fp)
    9500:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
    9504:	e0bffc17 	ldw	r2,-16(fp)
    9508:	10800017 	ldw	r2,0(r2)
    950c:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
    9510:	e0bffe17 	ldw	r2,-8(fp)
    9514:	e0fffd17 	ldw	r3,-12(fp)
    9518:	1885883a 	add	r2,r3,r2
    951c:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
    9520:	00000e06 	br	955c <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
    9524:	e0bffa17 	ldw	r2,-24(fp)
    9528:	10800104 	addi	r2,r2,4
    952c:	10800037 	ldwio	r2,0(r2)
    9530:	10bfffec 	andhi	r2,r2,65535
    9534:	10000926 	beq	r2,zero,955c <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
    9538:	e0fffa17 	ldw	r3,-24(fp)
    953c:	e0bffd17 	ldw	r2,-12(fp)
    9540:	11000044 	addi	r4,r2,1
    9544:	e13ffd15 	stw	r4,-12(fp)
    9548:	10800003 	ldbu	r2,0(r2)
    954c:	10803fcc 	andi	r2,r2,255
    9550:	1080201c 	xori	r2,r2,128
    9554:	10bfe004 	addi	r2,r2,-128
    9558:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
    955c:	e0fffd17 	ldw	r3,-12(fp)
    9560:	e0bffb17 	ldw	r2,-20(fp)
    9564:	18bfef36 	bltu	r3,r2,9524 <_gp+0xffff674c>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
    9568:	e0bffe17 	ldw	r2,-8(fp)
}
    956c:	e037883a 	mov	sp,fp
    9570:	df000017 	ldw	fp,0(sp)
    9574:	dec00104 	addi	sp,sp,4
    9578:	f800283a 	ret

0000957c <alt_avalon_timer_sc_irq>:
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
static void alt_avalon_timer_sc_irq (void* base)
#else
static void alt_avalon_timer_sc_irq (void* base, alt_u32 id)
#endif
{
    957c:	defffa04 	addi	sp,sp,-24
    9580:	dfc00515 	stw	ra,20(sp)
    9584:	df000415 	stw	fp,16(sp)
    9588:	df000404 	addi	fp,sp,16
    958c:	e13fff15 	stw	r4,-4(fp)
  alt_irq_context cpu_sr;
  
  /* clear the interrupt */
  IOWR_ALTERA_AVALON_TIMER_STATUS (base, 0);
    9590:	0007883a 	mov	r3,zero
    9594:	e0bfff17 	ldw	r2,-4(fp)
    9598:	10c00035 	stwio	r3,0(r2)
  /* 
   * Dummy read to ensure IRQ is negated before the ISR returns.
   * The control register is read because reading the status
   * register has side-effects per the register map documentation.
   */
  IORD_ALTERA_AVALON_TIMER_CONTROL (base);
    959c:	e0bfff17 	ldw	r2,-4(fp)
    95a0:	10800104 	addi	r2,r2,4
    95a4:	10800037 	ldwio	r2,0(r2)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    95a8:	0005303a 	rdctl	r2,status
    95ac:	e0bffd15 	stw	r2,-12(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    95b0:	e0fffd17 	ldw	r3,-12(fp)
    95b4:	00bfff84 	movi	r2,-2
    95b8:	1884703a 	and	r2,r3,r2
    95bc:	1001703a 	wrctl	status,r2
  
  return context;
    95c0:	e0bffd17 	ldw	r2,-12(fp)

  /* 
   * Notify the system of a clock tick. disable interrupts 
   * during this time to safely support ISR preemption
   */
  cpu_sr = alt_irq_disable_all();
    95c4:	e0bffc15 	stw	r2,-16(fp)
  alt_tick ();
    95c8:	000a2500 	call	a250 <alt_tick>
    95cc:	e0bffc17 	ldw	r2,-16(fp)
    95d0:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    95d4:	e0bffe17 	ldw	r2,-8(fp)
    95d8:	1001703a 	wrctl	status,r2
  alt_irq_enable_all(cpu_sr);
}
    95dc:	0001883a 	nop
    95e0:	e037883a 	mov	sp,fp
    95e4:	dfc00117 	ldw	ra,4(sp)
    95e8:	df000017 	ldw	fp,0(sp)
    95ec:	dec00204 	addi	sp,sp,8
    95f0:	f800283a 	ret

000095f4 <alt_avalon_timer_sc_init>:
 * auto-generated alt_sys_init() function.
 */

void alt_avalon_timer_sc_init (void* base, alt_u32 irq_controller_id, 
                                alt_u32 irq, alt_u32 freq)
{
    95f4:	defff804 	addi	sp,sp,-32
    95f8:	dfc00715 	stw	ra,28(sp)
    95fc:	df000615 	stw	fp,24(sp)
    9600:	df000604 	addi	fp,sp,24
    9604:	e13ffc15 	stw	r4,-16(fp)
    9608:	e17ffd15 	stw	r5,-12(fp)
    960c:	e1bffe15 	stw	r6,-8(fp)
    9610:	e1ffff15 	stw	r7,-4(fp)
    9614:	e0bfff17 	ldw	r2,-4(fp)
    9618:	e0bffb15 	stw	r2,-20(fp)
 * in order to initialise the value of the clock frequency.
 */

static ALT_INLINE int ALT_ALWAYS_INLINE alt_sysclk_init (alt_u32 nticks)
{
  if (! _alt_tick_rate)
    961c:	d0a0c817 	ldw	r2,-31968(gp)
    9620:	1000021e 	bne	r2,zero,962c <alt_avalon_timer_sc_init+0x38>
  {
    _alt_tick_rate = nticks;
    9624:	e0bffb17 	ldw	r2,-20(fp)
    9628:	d0a0c815 	stw	r2,-31968(gp)
  
  alt_sysclk_init (freq);
  
  /* set to free running mode */
  
  IOWR_ALTERA_AVALON_TIMER_CONTROL (base, 
    962c:	e0bffc17 	ldw	r2,-16(fp)
    9630:	10800104 	addi	r2,r2,4
    9634:	00c001c4 	movi	r3,7
    9638:	10c00035 	stwio	r3,0(r2)
            ALTERA_AVALON_TIMER_CONTROL_CONT_MSK |
            ALTERA_AVALON_TIMER_CONTROL_START_MSK);

  /* register the interrupt handler, and enable the interrupt */
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
  alt_ic_isr_register(irq_controller_id, irq, alt_avalon_timer_sc_irq, 
    963c:	d8000015 	stw	zero,0(sp)
    9640:	e1fffc17 	ldw	r7,-16(fp)
    9644:	01800074 	movhi	r6,1
    9648:	31a55f04 	addi	r6,r6,-27268
    964c:	e17ffe17 	ldw	r5,-8(fp)
    9650:	e13ffd17 	ldw	r4,-12(fp)
    9654:	0009b1c0 	call	9b1c <alt_ic_isr_register>
                      base, NULL);
#else
  alt_irq_register (irq, base, alt_avalon_timer_sc_irq);
#endif  
}
    9658:	0001883a 	nop
    965c:	e037883a 	mov	sp,fp
    9660:	dfc00117 	ldw	ra,4(sp)
    9664:	df000017 	ldw	fp,0(sp)
    9668:	dec00204 	addi	sp,sp,8
    966c:	f800283a 	ret

00009670 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
    9670:	defffa04 	addi	sp,sp,-24
    9674:	dfc00515 	stw	ra,20(sp)
    9678:	df000415 	stw	fp,16(sp)
    967c:	df000404 	addi	fp,sp,16
    9680:	e13fff15 	stw	r4,-4(fp)
  {
    cycles_per_loop = 9;
  }
  else  
  {
    cycles_per_loop = 3;
    9684:	008000c4 	movi	r2,3
    9688:	e0bffd15 	stw	r2,-12(fp)
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
    968c:	e0fffd17 	ldw	r3,-12(fp)
    9690:	008003f4 	movhi	r2,15
    9694:	10909004 	addi	r2,r2,16960
    9698:	1885383a 	mul	r2,r3,r2
    969c:	100b883a 	mov	r5,r2
    96a0:	0100bef4 	movhi	r4,763
    96a4:	213c2004 	addi	r4,r4,-3968
    96a8:	0008ef80 	call	8ef8 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
    96ac:	100b883a 	mov	r5,r2
    96b0:	01200034 	movhi	r4,32768
    96b4:	213fffc4 	addi	r4,r4,-1
    96b8:	0008ef80 	call	8ef8 <__udivsi3>
    96bc:	100b883a 	mov	r5,r2
    96c0:	e13fff17 	ldw	r4,-4(fp)
    96c4:	0008ef80 	call	8ef8 <__udivsi3>
    96c8:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
    96cc:	e0bffe17 	ldw	r2,-8(fp)
    96d0:	10002a26 	beq	r2,zero,977c <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
    96d4:	e03ffc15 	stw	zero,-16(fp)
    96d8:	00001706 	br	9738 <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
    96dc:	00a00034 	movhi	r2,32768
    96e0:	10bfffc4 	addi	r2,r2,-1
    96e4:	10bfffc4 	addi	r2,r2,-1
    96e8:	103ffe1e 	bne	r2,zero,96e4 <_gp+0xffff690c>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
    96ec:	e0fffd17 	ldw	r3,-12(fp)
    96f0:	008003f4 	movhi	r2,15
    96f4:	10909004 	addi	r2,r2,16960
    96f8:	1885383a 	mul	r2,r3,r2
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
    96fc:	100b883a 	mov	r5,r2
    9700:	0100bef4 	movhi	r4,763
    9704:	213c2004 	addi	r4,r4,-3968
    9708:	0008ef80 	call	8ef8 <__udivsi3>
    970c:	100b883a 	mov	r5,r2
    9710:	01200034 	movhi	r4,32768
    9714:	213fffc4 	addi	r4,r4,-1
    9718:	0008ef80 	call	8ef8 <__udivsi3>
    971c:	1007883a 	mov	r3,r2
    9720:	e0bfff17 	ldw	r2,-4(fp)
    9724:	10c5c83a 	sub	r2,r2,r3
    9728:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
    972c:	e0bffc17 	ldw	r2,-16(fp)
    9730:	10800044 	addi	r2,r2,1
    9734:	e0bffc15 	stw	r2,-16(fp)
    9738:	e0fffc17 	ldw	r3,-16(fp)
    973c:	e0bffe17 	ldw	r2,-8(fp)
    9740:	18bfe616 	blt	r3,r2,96dc <_gp+0xffff6904>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    9744:	e0fffd17 	ldw	r3,-12(fp)
    9748:	008003f4 	movhi	r2,15
    974c:	10909004 	addi	r2,r2,16960
    9750:	1885383a 	mul	r2,r3,r2
    9754:	100b883a 	mov	r5,r2
    9758:	0100bef4 	movhi	r4,763
    975c:	213c2004 	addi	r4,r4,-3968
    9760:	0008ef80 	call	8ef8 <__udivsi3>
    9764:	1007883a 	mov	r3,r2
    9768:	e0bfff17 	ldw	r2,-4(fp)
    976c:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    9770:	10bfffc4 	addi	r2,r2,-1
    9774:	103ffe1e 	bne	r2,zero,9770 <_gp+0xffff6998>
    9778:	00000d06 	br	97b0 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
    977c:	e0fffd17 	ldw	r3,-12(fp)
    9780:	008003f4 	movhi	r2,15
    9784:	10909004 	addi	r2,r2,16960
    9788:	1885383a 	mul	r2,r3,r2
    978c:	100b883a 	mov	r5,r2
    9790:	0100bef4 	movhi	r4,763
    9794:	213c2004 	addi	r4,r4,-3968
    9798:	0008ef80 	call	8ef8 <__udivsi3>
    979c:	1007883a 	mov	r3,r2
    97a0:	e0bfff17 	ldw	r2,-4(fp)
    97a4:	1885383a 	mul	r2,r3,r2
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
    97a8:	10bfffc4 	addi	r2,r2,-1
    97ac:	00bffe16 	blt	zero,r2,97a8 <_gp+0xffff69d0>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
    97b0:	0005883a 	mov	r2,zero
}
    97b4:	e037883a 	mov	sp,fp
    97b8:	dfc00117 	ldw	ra,4(sp)
    97bc:	df000017 	ldw	fp,0(sp)
    97c0:	dec00204 	addi	sp,sp,8
    97c4:	f800283a 	ret

000097c8 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    97c8:	defffe04 	addi	sp,sp,-8
    97cc:	dfc00115 	stw	ra,4(sp)
    97d0:	df000015 	stw	fp,0(sp)
    97d4:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    97d8:	d0a00717 	ldw	r2,-32740(gp)
    97dc:	10000326 	beq	r2,zero,97ec <alt_get_errno+0x24>
    97e0:	d0a00717 	ldw	r2,-32740(gp)
    97e4:	103ee83a 	callr	r2
    97e8:	00000106 	br	97f0 <alt_get_errno+0x28>
    97ec:	d0a0c304 	addi	r2,gp,-31988
}
    97f0:	e037883a 	mov	sp,fp
    97f4:	dfc00117 	ldw	ra,4(sp)
    97f8:	df000017 	ldw	fp,0(sp)
    97fc:	dec00204 	addi	sp,sp,8
    9800:	f800283a 	ret

00009804 <close>:
 *
 * ALT_CLOSE is mapped onto the close() system call in alt_syscall.h
 */
 
int ALT_CLOSE (int fildes)
{
    9804:	defffb04 	addi	sp,sp,-20
    9808:	dfc00415 	stw	ra,16(sp)
    980c:	df000315 	stw	fp,12(sp)
    9810:	df000304 	addi	fp,sp,12
    9814:	e13fff15 	stw	r4,-4(fp)
   * A common error case is that when the file descriptor was created, the call
   * to open() failed resulting in a negative file descriptor. This is trapped
   * below so that we don't try and process an invalid file descriptor.
   */

  fd = (fildes < 0) ? NULL : &alt_fd_list[fildes];
    9818:	e0bfff17 	ldw	r2,-4(fp)
    981c:	10000616 	blt	r2,zero,9838 <close+0x34>
    9820:	e0bfff17 	ldw	r2,-4(fp)
    9824:	10c00324 	muli	r3,r2,12
    9828:	00800074 	movhi	r2,1
    982c:	10ab1604 	addi	r2,r2,-21416
    9830:	1885883a 	add	r2,r3,r2
    9834:	00000106 	br	983c <close+0x38>
    9838:	0005883a 	mov	r2,zero
    983c:	e0bffd15 	stw	r2,-12(fp)

  if (fd)
    9840:	e0bffd17 	ldw	r2,-12(fp)
    9844:	10001926 	beq	r2,zero,98ac <close+0xa8>
    /*
     * If the associated file system/device has a close function, call it so 
     * that any necessary cleanup code can run.
     */

    rval = (fd->dev->close) ? fd->dev->close(fd) : 0;
    9848:	e0bffd17 	ldw	r2,-12(fp)
    984c:	10800017 	ldw	r2,0(r2)
    9850:	10800417 	ldw	r2,16(r2)
    9854:	10000626 	beq	r2,zero,9870 <close+0x6c>
    9858:	e0bffd17 	ldw	r2,-12(fp)
    985c:	10800017 	ldw	r2,0(r2)
    9860:	10800417 	ldw	r2,16(r2)
    9864:	e13ffd17 	ldw	r4,-12(fp)
    9868:	103ee83a 	callr	r2
    986c:	00000106 	br	9874 <close+0x70>
    9870:	0005883a 	mov	r2,zero
    9874:	e0bffe15 	stw	r2,-8(fp)

    /* Free the file descriptor structure and return. */

    alt_release_fd (fildes);
    9878:	e13fff17 	ldw	r4,-4(fp)
    987c:	000a1500 	call	a150 <alt_release_fd>
    if (rval < 0)
    9880:	e0bffe17 	ldw	r2,-8(fp)
    9884:	1000070e 	bge	r2,zero,98a4 <close+0xa0>
    {
      ALT_ERRNO = -rval;
    9888:	00097c80 	call	97c8 <alt_get_errno>
    988c:	1007883a 	mov	r3,r2
    9890:	e0bffe17 	ldw	r2,-8(fp)
    9894:	0085c83a 	sub	r2,zero,r2
    9898:	18800015 	stw	r2,0(r3)
      return -1;
    989c:	00bfffc4 	movi	r2,-1
    98a0:	00000706 	br	98c0 <close+0xbc>
    }
    return 0;
    98a4:	0005883a 	mov	r2,zero
    98a8:	00000506 	br	98c0 <close+0xbc>
  }
  else
  {
    ALT_ERRNO = EBADFD;
    98ac:	00097c80 	call	97c8 <alt_get_errno>
    98b0:	1007883a 	mov	r3,r2
    98b4:	00801444 	movi	r2,81
    98b8:	18800015 	stw	r2,0(r3)
    return -1;
    98bc:	00bfffc4 	movi	r2,-1
  }
}
    98c0:	e037883a 	mov	sp,fp
    98c4:	dfc00117 	ldw	ra,4(sp)
    98c8:	df000017 	ldw	fp,0(sp)
    98cc:	dec00204 	addi	sp,sp,8
    98d0:	f800283a 	ret

000098d4 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    98d4:	defffe04 	addi	sp,sp,-8
    98d8:	df000115 	stw	fp,4(sp)
    98dc:	df000104 	addi	fp,sp,4
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    98e0:	e03fff15 	stw	zero,-4(fp)
    98e4:	00000506 	br	98fc <alt_dcache_flush_all+0x28>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
    98e8:	e0bfff17 	ldw	r2,-4(fp)
    98ec:	1000003b 	flushd	0(r2)
void alt_dcache_flush_all (void)
{
#if NIOS2_DCACHE_SIZE > 0
  char* i;
  
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
    98f0:	e0bfff17 	ldw	r2,-4(fp)
    98f4:	10800804 	addi	r2,r2,32
    98f8:	e0bfff15 	stw	r2,-4(fp)
    98fc:	e0bfff17 	ldw	r2,-4(fp)
    9900:	10820030 	cmpltui	r2,r2,2048
    9904:	103ff81e 	bne	r2,zero,98e8 <_gp+0xffff6b10>
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
    9908:	0001883a 	nop
    990c:	e037883a 	mov	sp,fp
    9910:	df000017 	ldw	fp,0(sp)
    9914:	dec00104 	addi	sp,sp,4
    9918:	f800283a 	ret

0000991c <alt_dev_null_write>:
 * by the alt_dev_null device. It simple discards all data passed to it, and
 * indicates that the data has been successfully transmitted.
 */

static int alt_dev_null_write (alt_fd* fd, const char* ptr, int len)
{
    991c:	defffc04 	addi	sp,sp,-16
    9920:	df000315 	stw	fp,12(sp)
    9924:	df000304 	addi	fp,sp,12
    9928:	e13ffd15 	stw	r4,-12(fp)
    992c:	e17ffe15 	stw	r5,-8(fp)
    9930:	e1bfff15 	stw	r6,-4(fp)
  return len;
    9934:	e0bfff17 	ldw	r2,-4(fp)
}
    9938:	e037883a 	mov	sp,fp
    993c:	df000017 	ldw	fp,0(sp)
    9940:	dec00104 	addi	sp,sp,4
    9944:	f800283a 	ret

00009948 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9948:	defffe04 	addi	sp,sp,-8
    994c:	dfc00115 	stw	ra,4(sp)
    9950:	df000015 	stw	fp,0(sp)
    9954:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    9958:	d0a00717 	ldw	r2,-32740(gp)
    995c:	10000326 	beq	r2,zero,996c <alt_get_errno+0x24>
    9960:	d0a00717 	ldw	r2,-32740(gp)
    9964:	103ee83a 	callr	r2
    9968:	00000106 	br	9970 <alt_get_errno+0x28>
    996c:	d0a0c304 	addi	r2,gp,-31988
}
    9970:	e037883a 	mov	sp,fp
    9974:	dfc00117 	ldw	ra,4(sp)
    9978:	df000017 	ldw	fp,0(sp)
    997c:	dec00204 	addi	sp,sp,8
    9980:	f800283a 	ret

00009984 <alt_dev_llist_insert>:
/*
 *
 */

int alt_dev_llist_insert (alt_dev_llist* dev, alt_llist* list)
{
    9984:	defffa04 	addi	sp,sp,-24
    9988:	dfc00515 	stw	ra,20(sp)
    998c:	df000415 	stw	fp,16(sp)
    9990:	df000404 	addi	fp,sp,16
    9994:	e13ffe15 	stw	r4,-8(fp)
    9998:	e17fff15 	stw	r5,-4(fp)
  /*
   * check that the device exists, and that it has a valid name.
   */

  if (!dev || !dev->name)
    999c:	e0bffe17 	ldw	r2,-8(fp)
    99a0:	10000326 	beq	r2,zero,99b0 <alt_dev_llist_insert+0x2c>
    99a4:	e0bffe17 	ldw	r2,-8(fp)
    99a8:	10800217 	ldw	r2,8(r2)
    99ac:	1000061e 	bne	r2,zero,99c8 <alt_dev_llist_insert+0x44>
  {
    ALT_ERRNO = EINVAL;
    99b0:	00099480 	call	9948 <alt_get_errno>
    99b4:	1007883a 	mov	r3,r2
    99b8:	00800584 	movi	r2,22
    99bc:	18800015 	stw	r2,0(r3)
    return -EINVAL;
    99c0:	00bffa84 	movi	r2,-22
    99c4:	00001306 	br	9a14 <alt_dev_llist_insert+0x90>
  
  /*
   * register the device.
   */
  
  alt_llist_insert(list, &dev->llist);
    99c8:	e0bffe17 	ldw	r2,-8(fp)
    99cc:	e0ffff17 	ldw	r3,-4(fp)
    99d0:	e0fffc15 	stw	r3,-16(fp)
    99d4:	e0bffd15 	stw	r2,-12(fp)
 */

static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_insert(alt_llist* list, 
                alt_llist* entry)
{
  entry->previous = list;
    99d8:	e0bffd17 	ldw	r2,-12(fp)
    99dc:	e0fffc17 	ldw	r3,-16(fp)
    99e0:	10c00115 	stw	r3,4(r2)
  entry->next     = list->next;
    99e4:	e0bffc17 	ldw	r2,-16(fp)
    99e8:	10c00017 	ldw	r3,0(r2)
    99ec:	e0bffd17 	ldw	r2,-12(fp)
    99f0:	10c00015 	stw	r3,0(r2)

  list->next->previous = entry;
    99f4:	e0bffc17 	ldw	r2,-16(fp)
    99f8:	10800017 	ldw	r2,0(r2)
    99fc:	e0fffd17 	ldw	r3,-12(fp)
    9a00:	10c00115 	stw	r3,4(r2)
  list->next           = entry;
    9a04:	e0bffc17 	ldw	r2,-16(fp)
    9a08:	e0fffd17 	ldw	r3,-12(fp)
    9a0c:	10c00015 	stw	r3,0(r2)

  return 0;  
    9a10:	0005883a 	mov	r2,zero
}
    9a14:	e037883a 	mov	sp,fp
    9a18:	dfc00117 	ldw	ra,4(sp)
    9a1c:	df000017 	ldw	fp,0(sp)
    9a20:	dec00204 	addi	sp,sp,8
    9a24:	f800283a 	ret

00009a28 <_do_ctors>:
/*
 * Run the C++ static constructors.
 */

void _do_ctors(void)
{
    9a28:	defffd04 	addi	sp,sp,-12
    9a2c:	dfc00215 	stw	ra,8(sp)
    9a30:	df000115 	stw	fp,4(sp)
    9a34:	df000104 	addi	fp,sp,4
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    9a38:	00800074 	movhi	r2,1
    9a3c:	10aa9804 	addi	r2,r2,-21920
    9a40:	e0bfff15 	stw	r2,-4(fp)
    9a44:	00000606 	br	9a60 <_do_ctors+0x38>
        (*ctor) (); 
    9a48:	e0bfff17 	ldw	r2,-4(fp)
    9a4c:	10800017 	ldw	r2,0(r2)
    9a50:	103ee83a 	callr	r2

void _do_ctors(void)
{
  constructor* ctor;

  for (ctor = &__CTOR_END__[-1]; ctor >= __CTOR_LIST__; ctor--)
    9a54:	e0bfff17 	ldw	r2,-4(fp)
    9a58:	10bfff04 	addi	r2,r2,-4
    9a5c:	e0bfff15 	stw	r2,-4(fp)
    9a60:	e0ffff17 	ldw	r3,-4(fp)
    9a64:	00800074 	movhi	r2,1
    9a68:	10aa9904 	addi	r2,r2,-21916
    9a6c:	18bff62e 	bgeu	r3,r2,9a48 <_gp+0xffff6c70>
        (*ctor) (); 
}
    9a70:	0001883a 	nop
    9a74:	e037883a 	mov	sp,fp
    9a78:	dfc00117 	ldw	ra,4(sp)
    9a7c:	df000017 	ldw	fp,0(sp)
    9a80:	dec00204 	addi	sp,sp,8
    9a84:	f800283a 	ret

00009a88 <_do_dtors>:
/*
 * Run the C++ static destructors.
 */

void _do_dtors(void)
{
    9a88:	defffd04 	addi	sp,sp,-12
    9a8c:	dfc00215 	stw	ra,8(sp)
    9a90:	df000115 	stw	fp,4(sp)
    9a94:	df000104 	addi	fp,sp,4
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    9a98:	00800074 	movhi	r2,1
    9a9c:	10aa9804 	addi	r2,r2,-21920
    9aa0:	e0bfff15 	stw	r2,-4(fp)
    9aa4:	00000606 	br	9ac0 <_do_dtors+0x38>
        (*dtor) (); 
    9aa8:	e0bfff17 	ldw	r2,-4(fp)
    9aac:	10800017 	ldw	r2,0(r2)
    9ab0:	103ee83a 	callr	r2

void _do_dtors(void)
{
  destructor* dtor;

  for (dtor = &__DTOR_END__[-1]; dtor >= __DTOR_LIST__; dtor--)
    9ab4:	e0bfff17 	ldw	r2,-4(fp)
    9ab8:	10bfff04 	addi	r2,r2,-4
    9abc:	e0bfff15 	stw	r2,-4(fp)
    9ac0:	e0ffff17 	ldw	r3,-4(fp)
    9ac4:	00800074 	movhi	r2,1
    9ac8:	10aa9904 	addi	r2,r2,-21916
    9acc:	18bff62e 	bgeu	r3,r2,9aa8 <_gp+0xffff6cd0>
        (*dtor) (); 
}
    9ad0:	0001883a 	nop
    9ad4:	e037883a 	mov	sp,fp
    9ad8:	dfc00117 	ldw	ra,4(sp)
    9adc:	df000017 	ldw	fp,0(sp)
    9ae0:	dec00204 	addi	sp,sp,8
    9ae4:	f800283a 	ret

00009ae8 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    9ae8:	defffe04 	addi	sp,sp,-8
    9aec:	dfc00115 	stw	ra,4(sp)
    9af0:	df000015 	stw	fp,0(sp)
    9af4:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
    9af8:	01440004 	movi	r5,4096
    9afc:	0009883a 	mov	r4,zero
    9b00:	000a5b80 	call	a5b8 <alt_icache_flush>
#endif
}
    9b04:	0001883a 	nop
    9b08:	e037883a 	mov	sp,fp
    9b0c:	dfc00117 	ldw	ra,4(sp)
    9b10:	df000017 	ldw	fp,0(sp)
    9b14:	dec00204 	addi	sp,sp,8
    9b18:	f800283a 	ret

00009b1c <alt_ic_isr_register>:
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    9b1c:	defff904 	addi	sp,sp,-28
    9b20:	dfc00615 	stw	ra,24(sp)
    9b24:	df000515 	stw	fp,20(sp)
    9b28:	df000504 	addi	fp,sp,20
    9b2c:	e13ffc15 	stw	r4,-16(fp)
    9b30:	e17ffd15 	stw	r5,-12(fp)
    9b34:	e1bffe15 	stw	r6,-8(fp)
    9b38:	e1ffff15 	stw	r7,-4(fp)
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    9b3c:	e0800217 	ldw	r2,8(fp)
    9b40:	d8800015 	stw	r2,0(sp)
    9b44:	e1ffff17 	ldw	r7,-4(fp)
    9b48:	e1bffe17 	ldw	r6,-8(fp)
    9b4c:	e17ffd17 	ldw	r5,-12(fp)
    9b50:	e13ffc17 	ldw	r4,-16(fp)
    9b54:	0009ccc0 	call	9ccc <alt_iic_isr_register>
}  
    9b58:	e037883a 	mov	sp,fp
    9b5c:	dfc00117 	ldw	ra,4(sp)
    9b60:	df000017 	ldw	fp,0(sp)
    9b64:	dec00204 	addi	sp,sp,8
    9b68:	f800283a 	ret

00009b6c <alt_ic_irq_enable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    9b6c:	defff904 	addi	sp,sp,-28
    9b70:	df000615 	stw	fp,24(sp)
    9b74:	df000604 	addi	fp,sp,24
    9b78:	e13ffe15 	stw	r4,-8(fp)
    9b7c:	e17fff15 	stw	r5,-4(fp)
    9b80:	e0bfff17 	ldw	r2,-4(fp)
    9b84:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9b88:	0005303a 	rdctl	r2,status
    9b8c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9b90:	e0fffb17 	ldw	r3,-20(fp)
    9b94:	00bfff84 	movi	r2,-2
    9b98:	1884703a 	and	r2,r3,r2
    9b9c:	1001703a 	wrctl	status,r2
  
  return context;
    9ba0:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_enable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    9ba4:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active |= (1 << id);
    9ba8:	00c00044 	movi	r3,1
    9bac:	e0bffa17 	ldw	r2,-24(fp)
    9bb0:	1884983a 	sll	r2,r3,r2
    9bb4:	1007883a 	mov	r3,r2
    9bb8:	d0a0c717 	ldw	r2,-31972(gp)
    9bbc:	1884b03a 	or	r2,r3,r2
    9bc0:	d0a0c715 	stw	r2,-31972(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    9bc4:	d0a0c717 	ldw	r2,-31972(gp)
    9bc8:	100170fa 	wrctl	ienable,r2
    9bcc:	e0bffc17 	ldw	r2,-16(fp)
    9bd0:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9bd4:	e0bffd17 	ldw	r2,-12(fp)
    9bd8:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    9bdc:	0005883a 	mov	r2,zero
    return alt_irq_enable(irq);
    9be0:	0001883a 	nop
}
    9be4:	e037883a 	mov	sp,fp
    9be8:	df000017 	ldw	fp,0(sp)
    9bec:	dec00104 	addi	sp,sp,4
    9bf0:	f800283a 	ret

00009bf4 <alt_ic_irq_disable>:
  * @param ic_id            Ignored.
  * @param irq              IRQ number
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    9bf4:	defff904 	addi	sp,sp,-28
    9bf8:	df000615 	stw	fp,24(sp)
    9bfc:	df000604 	addi	fp,sp,24
    9c00:	e13ffe15 	stw	r4,-8(fp)
    9c04:	e17fff15 	stw	r5,-4(fp)
    9c08:	e0bfff17 	ldw	r2,-4(fp)
    9c0c:	e0bffa15 	stw	r2,-24(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9c10:	0005303a 	rdctl	r2,status
    9c14:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9c18:	e0fffb17 	ldw	r3,-20(fp)
    9c1c:	00bfff84 	movi	r2,-2
    9c20:	1884703a 	and	r2,r3,r2
    9c24:	1001703a 	wrctl	status,r2
  
  return context;
    9c28:	e0bffb17 	ldw	r2,-20(fp)
static ALT_INLINE int ALT_ALWAYS_INLINE alt_irq_disable (alt_u32 id)
{
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();
    9c2c:	e0bffc15 	stw	r2,-16(fp)

  alt_irq_active &= ~(1 << id);
    9c30:	00c00044 	movi	r3,1
    9c34:	e0bffa17 	ldw	r2,-24(fp)
    9c38:	1884983a 	sll	r2,r3,r2
    9c3c:	0084303a 	nor	r2,zero,r2
    9c40:	1007883a 	mov	r3,r2
    9c44:	d0a0c717 	ldw	r2,-31972(gp)
    9c48:	1884703a 	and	r2,r3,r2
    9c4c:	d0a0c715 	stw	r2,-31972(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    9c50:	d0a0c717 	ldw	r2,-31972(gp)
    9c54:	100170fa 	wrctl	ienable,r2
    9c58:	e0bffc17 	ldw	r2,-16(fp)
    9c5c:	e0bffd15 	stw	r2,-12(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9c60:	e0bffd17 	ldw	r2,-12(fp)
    9c64:	1001703a 	wrctl	status,r2

  alt_irq_enable_all(status);

  return 0;
    9c68:	0005883a 	mov	r2,zero
    return alt_irq_disable(irq);
    9c6c:	0001883a 	nop
}
    9c70:	e037883a 	mov	sp,fp
    9c74:	df000017 	ldw	fp,0(sp)
    9c78:	dec00104 	addi	sp,sp,4
    9c7c:	f800283a 	ret

00009c80 <alt_ic_irq_enabled>:
  * @param irq              IRQ number
  * @return                 Zero if corresponding interrupt is disabled and
  *                         non-zero otherwise.
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    9c80:	defffc04 	addi	sp,sp,-16
    9c84:	df000315 	stw	fp,12(sp)
    9c88:	df000304 	addi	fp,sp,12
    9c8c:	e13ffe15 	stw	r4,-8(fp)
    9c90:	e17fff15 	stw	r5,-4(fp)
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    9c94:	000530fa 	rdctl	r2,ienable
    9c98:	e0bffd15 	stw	r2,-12(fp)

    return (irq_enabled & (1 << irq)) ? 1: 0;
    9c9c:	00c00044 	movi	r3,1
    9ca0:	e0bfff17 	ldw	r2,-4(fp)
    9ca4:	1884983a 	sll	r2,r3,r2
    9ca8:	1007883a 	mov	r3,r2
    9cac:	e0bffd17 	ldw	r2,-12(fp)
    9cb0:	1884703a 	and	r2,r3,r2
    9cb4:	1004c03a 	cmpne	r2,r2,zero
    9cb8:	10803fcc 	andi	r2,r2,255
}
    9cbc:	e037883a 	mov	sp,fp
    9cc0:	df000017 	ldw	fp,0(sp)
    9cc4:	dec00104 	addi	sp,sp,4
    9cc8:	f800283a 	ret

00009ccc <alt_iic_isr_register>:
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    9ccc:	defff504 	addi	sp,sp,-44
    9cd0:	dfc00a15 	stw	ra,40(sp)
    9cd4:	df000915 	stw	fp,36(sp)
    9cd8:	df000904 	addi	fp,sp,36
    9cdc:	e13ffc15 	stw	r4,-16(fp)
    9ce0:	e17ffd15 	stw	r5,-12(fp)
    9ce4:	e1bffe15 	stw	r6,-8(fp)
    9ce8:	e1ffff15 	stw	r7,-4(fp)
  int rc = -EINVAL;  
    9cec:	00bffa84 	movi	r2,-22
    9cf0:	e0bff715 	stw	r2,-36(fp)
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
    9cf4:	e0bffd17 	ldw	r2,-12(fp)
    9cf8:	e0bff815 	stw	r2,-32(fp)
  alt_irq_context status;

  if (id < ALT_NIRQ)
    9cfc:	e0bff817 	ldw	r2,-32(fp)
    9d00:	10800808 	cmpgei	r2,r2,32
    9d04:	1000271e 	bne	r2,zero,9da4 <alt_iic_isr_register+0xd8>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    9d08:	0005303a 	rdctl	r2,status
    9d0c:	e0bffb15 	stw	r2,-20(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    9d10:	e0fffb17 	ldw	r3,-20(fp)
    9d14:	00bfff84 	movi	r2,-2
    9d18:	1884703a 	and	r2,r3,r2
    9d1c:	1001703a 	wrctl	status,r2
  
  return context;
    9d20:	e0bffb17 	ldw	r2,-20(fp)
     * interrupts are disabled while the handler tables are updated to ensure
     * that an interrupt doesn't occur while the tables are in an inconsistant
     * state.
     */

    status = alt_irq_disable_all();
    9d24:	e0bffa15 	stw	r2,-24(fp)

    alt_irq[id].handler = isr;
    9d28:	00800074 	movhi	r2,1
    9d2c:	10ac4104 	addi	r2,r2,-20220
    9d30:	e0fff817 	ldw	r3,-32(fp)
    9d34:	180690fa 	slli	r3,r3,3
    9d38:	10c5883a 	add	r2,r2,r3
    9d3c:	e0fffe17 	ldw	r3,-8(fp)
    9d40:	10c00015 	stw	r3,0(r2)
    alt_irq[id].context = isr_context;
    9d44:	00800074 	movhi	r2,1
    9d48:	10ac4104 	addi	r2,r2,-20220
    9d4c:	e0fff817 	ldw	r3,-32(fp)
    9d50:	180690fa 	slli	r3,r3,3
    9d54:	10c5883a 	add	r2,r2,r3
    9d58:	10800104 	addi	r2,r2,4
    9d5c:	e0ffff17 	ldw	r3,-4(fp)
    9d60:	10c00015 	stw	r3,0(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    9d64:	e0bffe17 	ldw	r2,-8(fp)
    9d68:	10000526 	beq	r2,zero,9d80 <alt_iic_isr_register+0xb4>
    9d6c:	e0bff817 	ldw	r2,-32(fp)
    9d70:	100b883a 	mov	r5,r2
    9d74:	e13ffc17 	ldw	r4,-16(fp)
    9d78:	0009b6c0 	call	9b6c <alt_ic_irq_enable>
    9d7c:	00000406 	br	9d90 <alt_iic_isr_register+0xc4>
    9d80:	e0bff817 	ldw	r2,-32(fp)
    9d84:	100b883a 	mov	r5,r2
    9d88:	e13ffc17 	ldw	r4,-16(fp)
    9d8c:	0009bf40 	call	9bf4 <alt_ic_irq_disable>
    9d90:	e0bff715 	stw	r2,-36(fp)
    9d94:	e0bffa17 	ldw	r2,-24(fp)
    9d98:	e0bff915 	stw	r2,-28(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    9d9c:	e0bff917 	ldw	r2,-28(fp)
    9da0:	1001703a 	wrctl	status,r2

    alt_irq_enable_all(status);
  }

  return rc; 
    9da4:	e0bff717 	ldw	r2,-36(fp)
}
    9da8:	e037883a 	mov	sp,fp
    9dac:	dfc00117 	ldw	ra,4(sp)
    9db0:	df000017 	ldw	fp,0(sp)
    9db4:	dec00204 	addi	sp,sp,8
    9db8:	f800283a 	ret

00009dbc <alt_open_fd>:
 * If the device can not be succesfully opened, then the input file descriptor
 * remains unchanged.
 */

static void alt_open_fd(alt_fd* fd, const char* name, int flags, int mode)
{
    9dbc:	defff904 	addi	sp,sp,-28
    9dc0:	dfc00615 	stw	ra,24(sp)
    9dc4:	df000515 	stw	fp,20(sp)
    9dc8:	df000504 	addi	fp,sp,20
    9dcc:	e13ffc15 	stw	r4,-16(fp)
    9dd0:	e17ffd15 	stw	r5,-12(fp)
    9dd4:	e1bffe15 	stw	r6,-8(fp)
    9dd8:	e1ffff15 	stw	r7,-4(fp)
  int old;

  old = open (name, flags, mode);
    9ddc:	e1bfff17 	ldw	r6,-4(fp)
    9de0:	e17ffe17 	ldw	r5,-8(fp)
    9de4:	e13ffd17 	ldw	r4,-12(fp)
    9de8:	0009ffc0 	call	9ffc <open>
    9dec:	e0bffb15 	stw	r2,-20(fp)

  if (old >= 0)
    9df0:	e0bffb17 	ldw	r2,-20(fp)
    9df4:	10001c16 	blt	r2,zero,9e68 <alt_open_fd+0xac>
  {
    fd->dev      = alt_fd_list[old].dev;
    9df8:	00800074 	movhi	r2,1
    9dfc:	10ab1604 	addi	r2,r2,-21416
    9e00:	e0fffb17 	ldw	r3,-20(fp)
    9e04:	18c00324 	muli	r3,r3,12
    9e08:	10c5883a 	add	r2,r2,r3
    9e0c:	10c00017 	ldw	r3,0(r2)
    9e10:	e0bffc17 	ldw	r2,-16(fp)
    9e14:	10c00015 	stw	r3,0(r2)
    fd->priv     = alt_fd_list[old].priv;
    9e18:	00800074 	movhi	r2,1
    9e1c:	10ab1604 	addi	r2,r2,-21416
    9e20:	e0fffb17 	ldw	r3,-20(fp)
    9e24:	18c00324 	muli	r3,r3,12
    9e28:	10c5883a 	add	r2,r2,r3
    9e2c:	10800104 	addi	r2,r2,4
    9e30:	10c00017 	ldw	r3,0(r2)
    9e34:	e0bffc17 	ldw	r2,-16(fp)
    9e38:	10c00115 	stw	r3,4(r2)
    fd->fd_flags = alt_fd_list[old].fd_flags;
    9e3c:	00800074 	movhi	r2,1
    9e40:	10ab1604 	addi	r2,r2,-21416
    9e44:	e0fffb17 	ldw	r3,-20(fp)
    9e48:	18c00324 	muli	r3,r3,12
    9e4c:	10c5883a 	add	r2,r2,r3
    9e50:	10800204 	addi	r2,r2,8
    9e54:	10c00017 	ldw	r3,0(r2)
    9e58:	e0bffc17 	ldw	r2,-16(fp)
    9e5c:	10c00215 	stw	r3,8(r2)

    alt_release_fd (old);
    9e60:	e13ffb17 	ldw	r4,-20(fp)
    9e64:	000a1500 	call	a150 <alt_release_fd>
  }
} 
    9e68:	0001883a 	nop
    9e6c:	e037883a 	mov	sp,fp
    9e70:	dfc00117 	ldw	ra,4(sp)
    9e74:	df000017 	ldw	fp,0(sp)
    9e78:	dec00204 	addi	sp,sp,8
    9e7c:	f800283a 	ret

00009e80 <alt_io_redirect>:
 */
 
void alt_io_redirect(const char* stdout_dev, 
                     const char* stdin_dev, 
                     const char* stderr_dev)
{
    9e80:	defffb04 	addi	sp,sp,-20
    9e84:	dfc00415 	stw	ra,16(sp)
    9e88:	df000315 	stw	fp,12(sp)
    9e8c:	df000304 	addi	fp,sp,12
    9e90:	e13ffd15 	stw	r4,-12(fp)
    9e94:	e17ffe15 	stw	r5,-8(fp)
    9e98:	e1bfff15 	stw	r6,-4(fp)
  /* Redirect the channels */

  alt_open_fd (&alt_fd_list[STDOUT_FILENO], stdout_dev, O_WRONLY, 0777);
    9e9c:	01c07fc4 	movi	r7,511
    9ea0:	01800044 	movi	r6,1
    9ea4:	e17ffd17 	ldw	r5,-12(fp)
    9ea8:	01000074 	movhi	r4,1
    9eac:	212b1904 	addi	r4,r4,-21404
    9eb0:	0009dbc0 	call	9dbc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDIN_FILENO], stdin_dev, O_RDONLY, 0777);
    9eb4:	01c07fc4 	movi	r7,511
    9eb8:	000d883a 	mov	r6,zero
    9ebc:	e17ffe17 	ldw	r5,-8(fp)
    9ec0:	01000074 	movhi	r4,1
    9ec4:	212b1604 	addi	r4,r4,-21416
    9ec8:	0009dbc0 	call	9dbc <alt_open_fd>
  alt_open_fd (&alt_fd_list[STDERR_FILENO], stderr_dev, O_WRONLY, 0777);
    9ecc:	01c07fc4 	movi	r7,511
    9ed0:	01800044 	movi	r6,1
    9ed4:	e17fff17 	ldw	r5,-4(fp)
    9ed8:	01000074 	movhi	r4,1
    9edc:	212b1c04 	addi	r4,r4,-21392
    9ee0:	0009dbc0 	call	9dbc <alt_open_fd>
}  
    9ee4:	0001883a 	nop
    9ee8:	e037883a 	mov	sp,fp
    9eec:	dfc00117 	ldw	ra,4(sp)
    9ef0:	df000017 	ldw	fp,0(sp)
    9ef4:	dec00204 	addi	sp,sp,8
    9ef8:	f800283a 	ret

00009efc <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
    9efc:	defffe04 	addi	sp,sp,-8
    9f00:	dfc00115 	stw	ra,4(sp)
    9f04:	df000015 	stw	fp,0(sp)
    9f08:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
    9f0c:	d0a00717 	ldw	r2,-32740(gp)
    9f10:	10000326 	beq	r2,zero,9f20 <alt_get_errno+0x24>
    9f14:	d0a00717 	ldw	r2,-32740(gp)
    9f18:	103ee83a 	callr	r2
    9f1c:	00000106 	br	9f24 <alt_get_errno+0x28>
    9f20:	d0a0c304 	addi	r2,gp,-31988
}
    9f24:	e037883a 	mov	sp,fp
    9f28:	dfc00117 	ldw	ra,4(sp)
    9f2c:	df000017 	ldw	fp,0(sp)
    9f30:	dec00204 	addi	sp,sp,8
    9f34:	f800283a 	ret

00009f38 <alt_file_locked>:
 * performed for devices. Filesystems are required to handle the ioctl() call
 * themselves, and report the error from the filesystems open() function. 
 */ 

static int alt_file_locked (alt_fd* fd)
{
    9f38:	defffd04 	addi	sp,sp,-12
    9f3c:	df000215 	stw	fp,8(sp)
    9f40:	df000204 	addi	fp,sp,8
    9f44:	e13fff15 	stw	r4,-4(fp)

  /*
   * Mark the file descriptor as belonging to a device.
   */

  fd->fd_flags |= ALT_FD_DEV;
    9f48:	e0bfff17 	ldw	r2,-4(fp)
    9f4c:	10800217 	ldw	r2,8(r2)
    9f50:	10d00034 	orhi	r3,r2,16384
    9f54:	e0bfff17 	ldw	r2,-4(fp)
    9f58:	10c00215 	stw	r3,8(r2)
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    9f5c:	e03ffe15 	stw	zero,-8(fp)
    9f60:	00001d06 	br	9fd8 <alt_file_locked+0xa0>
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    9f64:	00800074 	movhi	r2,1
    9f68:	10ab1604 	addi	r2,r2,-21416
    9f6c:	e0fffe17 	ldw	r3,-8(fp)
    9f70:	18c00324 	muli	r3,r3,12
    9f74:	10c5883a 	add	r2,r2,r3
    9f78:	10c00017 	ldw	r3,0(r2)
    9f7c:	e0bfff17 	ldw	r2,-4(fp)
    9f80:	10800017 	ldw	r2,0(r2)
    9f84:	1880111e 	bne	r3,r2,9fcc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    9f88:	00800074 	movhi	r2,1
    9f8c:	10ab1604 	addi	r2,r2,-21416
    9f90:	e0fffe17 	ldw	r3,-8(fp)
    9f94:	18c00324 	muli	r3,r3,12
    9f98:	10c5883a 	add	r2,r2,r3
    9f9c:	10800204 	addi	r2,r2,8
    9fa0:	10800017 	ldw	r2,0(r2)
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
    9fa4:	1000090e 	bge	r2,zero,9fcc <alt_file_locked+0x94>
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
        (&alt_fd_list[i] != fd))
    9fa8:	e0bffe17 	ldw	r2,-8(fp)
    9fac:	10c00324 	muli	r3,r2,12
    9fb0:	00800074 	movhi	r2,1
    9fb4:	10ab1604 	addi	r2,r2,-21416
    9fb8:	1887883a 	add	r3,r3,r2
   */

  for (i = 0; i <= alt_max_fd; i++)
  {
    if ((alt_fd_list[i].dev == fd->dev) &&
        (alt_fd_list[i].fd_flags & ALT_FD_EXCL) &&
    9fbc:	e0bfff17 	ldw	r2,-4(fp)
    9fc0:	18800226 	beq	r3,r2,9fcc <alt_file_locked+0x94>
        (&alt_fd_list[i] != fd))
    {
      return -EACCES;
    9fc4:	00bffcc4 	movi	r2,-13
    9fc8:	00000806 	br	9fec <alt_file_locked+0xb4>
  /*
   * Loop through all current file descriptors searching for one that's locked
   * for exclusive access. If a match is found, generate an error.
   */

  for (i = 0; i <= alt_max_fd; i++)
    9fcc:	e0bffe17 	ldw	r2,-8(fp)
    9fd0:	10800044 	addi	r2,r2,1
    9fd4:	e0bffe15 	stw	r2,-8(fp)
    9fd8:	d0a00617 	ldw	r2,-32744(gp)
    9fdc:	1007883a 	mov	r3,r2
    9fe0:	e0bffe17 	ldw	r2,-8(fp)
    9fe4:	18bfdf2e 	bgeu	r3,r2,9f64 <_gp+0xffff718c>
    }
  }
  
  /* The device is not locked */
 
  return 0;
    9fe8:	0005883a 	mov	r2,zero
}
    9fec:	e037883a 	mov	sp,fp
    9ff0:	df000017 	ldw	fp,0(sp)
    9ff4:	dec00104 	addi	sp,sp,4
    9ff8:	f800283a 	ret

00009ffc <open>:
 *
 * ALT_OPEN is mapped onto the open() system call in alt_syscall.h
 */
 
int ALT_OPEN (const char* file, int flags, int mode)
{ 
    9ffc:	defff604 	addi	sp,sp,-40
    a000:	dfc00915 	stw	ra,36(sp)
    a004:	df000815 	stw	fp,32(sp)
    a008:	df000804 	addi	fp,sp,32
    a00c:	e13ffd15 	stw	r4,-12(fp)
    a010:	e17ffe15 	stw	r5,-8(fp)
    a014:	e1bfff15 	stw	r6,-4(fp)
  alt_dev* dev;
  alt_fd*  fd;
  int index  = -1;
    a018:	00bfffc4 	movi	r2,-1
    a01c:	e0bff915 	stw	r2,-28(fp)
  int status = -ENODEV;
    a020:	00bffb44 	movi	r2,-19
    a024:	e0bffa15 	stw	r2,-24(fp)
  int isafs = 0;
    a028:	e03ffb15 	stw	zero,-20(fp)
  /* 
   * Check the device list, to see if a device with a matching name is 
   * registered.
   */
  
  if (!(dev = alt_find_dev (file, &alt_dev_list)))
    a02c:	d1600404 	addi	r5,gp,-32752
    a030:	e13ffd17 	ldw	r4,-12(fp)
    a034:	000a37c0 	call	a37c <alt_find_dev>
    a038:	e0bff815 	stw	r2,-32(fp)
    a03c:	e0bff817 	ldw	r2,-32(fp)
    a040:	1000051e 	bne	r2,zero,a058 <open+0x5c>
  {
    /* No matching device, so try the filesystem list */

    dev   = alt_find_file (file);
    a044:	e13ffd17 	ldw	r4,-12(fp)
    a048:	000a40c0 	call	a40c <alt_find_file>
    a04c:	e0bff815 	stw	r2,-32(fp)
    isafs = 1;
    a050:	00800044 	movi	r2,1
    a054:	e0bffb15 	stw	r2,-20(fp)

  /* 
   * If a matching device or filesystem is found, allocate a file descriptor. 
   */

  if (dev)
    a058:	e0bff817 	ldw	r2,-32(fp)
    a05c:	10002926 	beq	r2,zero,a104 <open+0x108>
  {
    if ((index = alt_get_fd (dev)) < 0)
    a060:	e13ff817 	ldw	r4,-32(fp)
    a064:	000a5140 	call	a514 <alt_get_fd>
    a068:	e0bff915 	stw	r2,-28(fp)
    a06c:	e0bff917 	ldw	r2,-28(fp)
    a070:	1000030e 	bge	r2,zero,a080 <open+0x84>
    {
      status = index;
    a074:	e0bff917 	ldw	r2,-28(fp)
    a078:	e0bffa15 	stw	r2,-24(fp)
    a07c:	00002306 	br	a10c <open+0x110>
    }
    else
    {
      fd = &alt_fd_list[index];
    a080:	e0bff917 	ldw	r2,-28(fp)
    a084:	10c00324 	muli	r3,r2,12
    a088:	00800074 	movhi	r2,1
    a08c:	10ab1604 	addi	r2,r2,-21416
    a090:	1885883a 	add	r2,r3,r2
    a094:	e0bffc15 	stw	r2,-16(fp)
      fd->fd_flags = (flags & ~ALT_FD_FLAGS_MASK);
    a098:	e0fffe17 	ldw	r3,-8(fp)
    a09c:	00900034 	movhi	r2,16384
    a0a0:	10bfffc4 	addi	r2,r2,-1
    a0a4:	1886703a 	and	r3,r3,r2
    a0a8:	e0bffc17 	ldw	r2,-16(fp)
    a0ac:	10c00215 	stw	r3,8(r2)
      
      /* If this is a device, ensure it isn't already locked */

      if (isafs || ((status = alt_file_locked (fd)) >= 0))
    a0b0:	e0bffb17 	ldw	r2,-20(fp)
    a0b4:	1000051e 	bne	r2,zero,a0cc <open+0xd0>
    a0b8:	e13ffc17 	ldw	r4,-16(fp)
    a0bc:	0009f380 	call	9f38 <alt_file_locked>
    a0c0:	e0bffa15 	stw	r2,-24(fp)
    a0c4:	e0bffa17 	ldw	r2,-24(fp)
    a0c8:	10001016 	blt	r2,zero,a10c <open+0x110>
        /* 
         * If the device or filesystem provides an open() callback function,
         * call it now to perform any device/filesystem specific operations.
         */
    
        status = (dev->open) ? dev->open(fd, file, flags, mode): 0;
    a0cc:	e0bff817 	ldw	r2,-32(fp)
    a0d0:	10800317 	ldw	r2,12(r2)
    a0d4:	10000826 	beq	r2,zero,a0f8 <open+0xfc>
    a0d8:	e0bff817 	ldw	r2,-32(fp)
    a0dc:	10800317 	ldw	r2,12(r2)
    a0e0:	e1ffff17 	ldw	r7,-4(fp)
    a0e4:	e1bffe17 	ldw	r6,-8(fp)
    a0e8:	e17ffd17 	ldw	r5,-12(fp)
    a0ec:	e13ffc17 	ldw	r4,-16(fp)
    a0f0:	103ee83a 	callr	r2
    a0f4:	00000106 	br	a0fc <open+0x100>
    a0f8:	0005883a 	mov	r2,zero
    a0fc:	e0bffa15 	stw	r2,-24(fp)
    a100:	00000206 	br	a10c <open+0x110>
      }
    }
  }
  else
  {
    status = -ENODEV;
    a104:	00bffb44 	movi	r2,-19
    a108:	e0bffa15 	stw	r2,-24(fp)
  }

  /* Allocation failed, so clean up and return an error */ 

  if (status < 0)
    a10c:	e0bffa17 	ldw	r2,-24(fp)
    a110:	1000090e 	bge	r2,zero,a138 <open+0x13c>
  {
    alt_release_fd (index);  
    a114:	e13ff917 	ldw	r4,-28(fp)
    a118:	000a1500 	call	a150 <alt_release_fd>
    ALT_ERRNO = -status;
    a11c:	0009efc0 	call	9efc <alt_get_errno>
    a120:	1007883a 	mov	r3,r2
    a124:	e0bffa17 	ldw	r2,-24(fp)
    a128:	0085c83a 	sub	r2,zero,r2
    a12c:	18800015 	stw	r2,0(r3)
    return -1;
    a130:	00bfffc4 	movi	r2,-1
    a134:	00000106 	br	a13c <open+0x140>
  }
  
  /* return the reference upon success */

  return index;
    a138:	e0bff917 	ldw	r2,-28(fp)
}
    a13c:	e037883a 	mov	sp,fp
    a140:	dfc00117 	ldw	ra,4(sp)
    a144:	df000017 	ldw	fp,0(sp)
    a148:	dec00204 	addi	sp,sp,8
    a14c:	f800283a 	ret

0000a150 <alt_release_fd>:
 * File descriptors correcponding to standard in, standard out and standard 
 * error cannont be released backed to the pool. They are always reserved.
 */

void alt_release_fd (int fd)
{
    a150:	defffe04 	addi	sp,sp,-8
    a154:	df000115 	stw	fp,4(sp)
    a158:	df000104 	addi	fp,sp,4
    a15c:	e13fff15 	stw	r4,-4(fp)
  if (fd > 2)
    a160:	e0bfff17 	ldw	r2,-4(fp)
    a164:	108000d0 	cmplti	r2,r2,3
    a168:	10000d1e 	bne	r2,zero,a1a0 <alt_release_fd+0x50>
  {
    alt_fd_list[fd].fd_flags = 0;
    a16c:	00800074 	movhi	r2,1
    a170:	10ab1604 	addi	r2,r2,-21416
    a174:	e0ffff17 	ldw	r3,-4(fp)
    a178:	18c00324 	muli	r3,r3,12
    a17c:	10c5883a 	add	r2,r2,r3
    a180:	10800204 	addi	r2,r2,8
    a184:	10000015 	stw	zero,0(r2)
    alt_fd_list[fd].dev      = 0;
    a188:	00800074 	movhi	r2,1
    a18c:	10ab1604 	addi	r2,r2,-21416
    a190:	e0ffff17 	ldw	r3,-4(fp)
    a194:	18c00324 	muli	r3,r3,12
    a198:	10c5883a 	add	r2,r2,r3
    a19c:	10000015 	stw	zero,0(r2)
  }
}
    a1a0:	0001883a 	nop
    a1a4:	e037883a 	mov	sp,fp
    a1a8:	df000017 	ldw	fp,0(sp)
    a1ac:	dec00104 	addi	sp,sp,4
    a1b0:	f800283a 	ret

0000a1b4 <alt_alarm_stop>:
 * alarms. Alternatively an alarm can unregister itself by returning zero when 
 * the alarm executes.
 */

void alt_alarm_stop (alt_alarm* alarm)
{
    a1b4:	defffa04 	addi	sp,sp,-24
    a1b8:	df000515 	stw	fp,20(sp)
    a1bc:	df000504 	addi	fp,sp,20
    a1c0:	e13fff15 	stw	r4,-4(fp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    a1c4:	0005303a 	rdctl	r2,status
    a1c8:	e0bffc15 	stw	r2,-16(fp)

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    a1cc:	e0fffc17 	ldw	r3,-16(fp)
    a1d0:	00bfff84 	movi	r2,-2
    a1d4:	1884703a 	and	r2,r3,r2
    a1d8:	1001703a 	wrctl	status,r2
  
  return context;
    a1dc:	e0bffc17 	ldw	r2,-16(fp)
  alt_irq_context irq_context;

  irq_context = alt_irq_disable_all();
    a1e0:	e0bffb15 	stw	r2,-20(fp)
  alt_llist_remove (&alarm->llist);
    a1e4:	e0bfff17 	ldw	r2,-4(fp)
    a1e8:	e0bffd15 	stw	r2,-12(fp)
 * input argument is the element to remove.
 */
     
static ALT_INLINE void ALT_ALWAYS_INLINE alt_llist_remove(alt_llist* entry)
{
  entry->next->previous = entry->previous;
    a1ec:	e0bffd17 	ldw	r2,-12(fp)
    a1f0:	10800017 	ldw	r2,0(r2)
    a1f4:	e0fffd17 	ldw	r3,-12(fp)
    a1f8:	18c00117 	ldw	r3,4(r3)
    a1fc:	10c00115 	stw	r3,4(r2)
  entry->previous->next = entry->next;
    a200:	e0bffd17 	ldw	r2,-12(fp)
    a204:	10800117 	ldw	r2,4(r2)
    a208:	e0fffd17 	ldw	r3,-12(fp)
    a20c:	18c00017 	ldw	r3,0(r3)
    a210:	10c00015 	stw	r3,0(r2)
  /* 
   * Set the entry to point to itself, so that any further calls to
   * alt_llist_remove() are harmless.
   */

  entry->previous = entry;
    a214:	e0bffd17 	ldw	r2,-12(fp)
    a218:	e0fffd17 	ldw	r3,-12(fp)
    a21c:	10c00115 	stw	r3,4(r2)
  entry->next     = entry;
    a220:	e0bffd17 	ldw	r2,-12(fp)
    a224:	e0fffd17 	ldw	r3,-12(fp)
    a228:	10c00015 	stw	r3,0(r2)
    a22c:	e0bffb17 	ldw	r2,-20(fp)
    a230:	e0bffe15 	stw	r2,-8(fp)
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    a234:	e0bffe17 	ldw	r2,-8(fp)
    a238:	1001703a 	wrctl	status,r2
  alt_irq_enable_all (irq_context);
}
    a23c:	0001883a 	nop
    a240:	e037883a 	mov	sp,fp
    a244:	df000017 	ldw	fp,0(sp)
    a248:	dec00104 	addi	sp,sp,4
    a24c:	f800283a 	ret

0000a250 <alt_tick>:
 * 
 * alt_tick() is expected to run at interrupt level.
 */

void alt_tick (void)
{
    a250:	defffb04 	addi	sp,sp,-20
    a254:	dfc00415 	stw	ra,16(sp)
    a258:	df000315 	stw	fp,12(sp)
    a25c:	df000304 	addi	fp,sp,12
  alt_alarm* next;
  alt_alarm* alarm = (alt_alarm*) alt_alarm_list.next;
    a260:	d0a00917 	ldw	r2,-32732(gp)
    a264:	e0bffd15 	stw	r2,-12(fp)

  alt_u32    next_callback;

  /* update the tick counter */

  _alt_nticks++;
    a268:	d0a0c917 	ldw	r2,-31964(gp)
    a26c:	10800044 	addi	r2,r2,1
    a270:	d0a0c915 	stw	r2,-31964(gp)

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    a274:	00002e06 	br	a330 <alt_tick+0xe0>
  {
    next = (alt_alarm*) alarm->llist.next;
    a278:	e0bffd17 	ldw	r2,-12(fp)
    a27c:	10800017 	ldw	r2,0(r2)
    a280:	e0bffe15 	stw	r2,-8(fp)
    /* 
     * Upon the tick-counter rolling over it is safe to clear the 
     * roll-over flag; once the flag is cleared this (or subsequnt)
     * tick events are enabled to generate an alarm event. 
     */
    if ((alarm->rollover) && (_alt_nticks == 0))
    a284:	e0bffd17 	ldw	r2,-12(fp)
    a288:	10800403 	ldbu	r2,16(r2)
    a28c:	10803fcc 	andi	r2,r2,255
    a290:	10000426 	beq	r2,zero,a2a4 <alt_tick+0x54>
    a294:	d0a0c917 	ldw	r2,-31964(gp)
    a298:	1000021e 	bne	r2,zero,a2a4 <alt_tick+0x54>
    {
      alarm->rollover = 0;
    a29c:	e0bffd17 	ldw	r2,-12(fp)
    a2a0:	10000405 	stb	zero,16(r2)
    }
    
    /* if the alarm period has expired, make the callback */    
    if ((alarm->time <= _alt_nticks) && (alarm->rollover == 0))
    a2a4:	e0bffd17 	ldw	r2,-12(fp)
    a2a8:	10800217 	ldw	r2,8(r2)
    a2ac:	d0e0c917 	ldw	r3,-31964(gp)
    a2b0:	18801d36 	bltu	r3,r2,a328 <alt_tick+0xd8>
    a2b4:	e0bffd17 	ldw	r2,-12(fp)
    a2b8:	10800403 	ldbu	r2,16(r2)
    a2bc:	10803fcc 	andi	r2,r2,255
    a2c0:	1000191e 	bne	r2,zero,a328 <alt_tick+0xd8>
    {
      next_callback = alarm->callback (alarm->context);
    a2c4:	e0bffd17 	ldw	r2,-12(fp)
    a2c8:	10800317 	ldw	r2,12(r2)
    a2cc:	e0fffd17 	ldw	r3,-12(fp)
    a2d0:	18c00517 	ldw	r3,20(r3)
    a2d4:	1809883a 	mov	r4,r3
    a2d8:	103ee83a 	callr	r2
    a2dc:	e0bfff15 	stw	r2,-4(fp)

      /* deactivate the alarm if the return value is zero */

      if (next_callback == 0)
    a2e0:	e0bfff17 	ldw	r2,-4(fp)
    a2e4:	1000031e 	bne	r2,zero,a2f4 <alt_tick+0xa4>
      {
        alt_alarm_stop (alarm);
    a2e8:	e13ffd17 	ldw	r4,-12(fp)
    a2ec:	000a1b40 	call	a1b4 <alt_alarm_stop>
    a2f0:	00000d06 	br	a328 <alt_tick+0xd8>
      }
      else
      {
        alarm->time += next_callback;
    a2f4:	e0bffd17 	ldw	r2,-12(fp)
    a2f8:	10c00217 	ldw	r3,8(r2)
    a2fc:	e0bfff17 	ldw	r2,-4(fp)
    a300:	1887883a 	add	r3,r3,r2
    a304:	e0bffd17 	ldw	r2,-12(fp)
    a308:	10c00215 	stw	r3,8(r2)
        /* 
         * If the desired alarm time causes a roll-over, set the rollover
         * flag. This will prevent the subsequent tick event from causing
         * an alarm too early.
         */
        if(alarm->time < _alt_nticks)
    a30c:	e0bffd17 	ldw	r2,-12(fp)
    a310:	10c00217 	ldw	r3,8(r2)
    a314:	d0a0c917 	ldw	r2,-31964(gp)
    a318:	1880032e 	bgeu	r3,r2,a328 <alt_tick+0xd8>
        {
          alarm->rollover = 1;
    a31c:	e0bffd17 	ldw	r2,-12(fp)
    a320:	00c00044 	movi	r3,1
    a324:	10c00405 	stb	r3,16(r2)
        }
      }
    }
    alarm = next;
    a328:	e0bffe17 	ldw	r2,-8(fp)
    a32c:	e0bffd15 	stw	r2,-12(fp)

  _alt_nticks++;

  /* process the registered callbacks */

  while (alarm != (alt_alarm*) &alt_alarm_list)
    a330:	e0fffd17 	ldw	r3,-12(fp)
    a334:	d0a00904 	addi	r2,gp,-32732
    a338:	18bfcf1e 	bne	r3,r2,a278 <_gp+0xffff74a0>

  /* 
   * Update the operating system specific timer facilities.
   */

  ALT_OS_TIME_TICK();
    a33c:	0001883a 	nop
}
    a340:	0001883a 	nop
    a344:	e037883a 	mov	sp,fp
    a348:	dfc00117 	ldw	ra,4(sp)
    a34c:	df000017 	ldw	fp,0(sp)
    a350:	dec00204 	addi	sp,sp,8
    a354:	f800283a 	ret

0000a358 <altera_nios2_gen2_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    a358:	deffff04 	addi	sp,sp,-4
    a35c:	df000015 	stw	fp,0(sp)
    a360:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
    a364:	000170fa 	wrctl	ienable,zero
}
    a368:	0001883a 	nop
    a36c:	e037883a 	mov	sp,fp
    a370:	df000017 	ldw	fp,0(sp)
    a374:	dec00104 	addi	sp,sp,4
    a378:	f800283a 	ret

0000a37c <alt_find_dev>:
 * "name" must be an exact match for the devices registered name for a match to
 * be found.
 */
 
alt_dev* alt_find_dev(const char* name, alt_llist* llist)
{
    a37c:	defffa04 	addi	sp,sp,-24
    a380:	dfc00515 	stw	ra,20(sp)
    a384:	df000415 	stw	fp,16(sp)
    a388:	df000404 	addi	fp,sp,16
    a38c:	e13ffe15 	stw	r4,-8(fp)
    a390:	e17fff15 	stw	r5,-4(fp)
  alt_dev* next = (alt_dev*) llist->next;
    a394:	e0bfff17 	ldw	r2,-4(fp)
    a398:	10800017 	ldw	r2,0(r2)
    a39c:	e0bffc15 	stw	r2,-16(fp)
  alt_32 len;

  len  = strlen(name) + 1;
    a3a0:	e13ffe17 	ldw	r4,-8(fp)
    a3a4:	00087280 	call	8728 <strlen>
    a3a8:	10800044 	addi	r2,r2,1
    a3ac:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    a3b0:	00000d06 	br	a3e8 <alt_find_dev+0x6c>
    /* 
     * memcmp() is used here rather than strcmp() in order to reduce the size
     * of the executable.
     */

    if (!memcmp (next->name, name, len))
    a3b4:	e0bffc17 	ldw	r2,-16(fp)
    a3b8:	10800217 	ldw	r2,8(r2)
    a3bc:	e0fffd17 	ldw	r3,-12(fp)
    a3c0:	180d883a 	mov	r6,r3
    a3c4:	e17ffe17 	ldw	r5,-8(fp)
    a3c8:	1009883a 	mov	r4,r2
    a3cc:	000a7180 	call	a718 <memcmp>
    a3d0:	1000021e 	bne	r2,zero,a3dc <alt_find_dev+0x60>
    {
      /* match found */

      return next;
    a3d4:	e0bffc17 	ldw	r2,-16(fp)
    a3d8:	00000706 	br	a3f8 <alt_find_dev+0x7c>
    }
    next = (alt_dev*) next->llist.next;
    a3dc:	e0bffc17 	ldw	r2,-16(fp)
    a3e0:	10800017 	ldw	r2,0(r2)
    a3e4:	e0bffc15 	stw	r2,-16(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 

  while (next != (alt_dev*) llist)
    a3e8:	e0fffc17 	ldw	r3,-16(fp)
    a3ec:	e0bfff17 	ldw	r2,-4(fp)
    a3f0:	18bff01e 	bne	r3,r2,a3b4 <_gp+0xffff75dc>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;
    a3f4:	0005883a 	mov	r2,zero
}
    a3f8:	e037883a 	mov	sp,fp
    a3fc:	dfc00117 	ldw	ra,4(sp)
    a400:	df000017 	ldw	fp,0(sp)
    a404:	dec00204 	addi	sp,sp,8
    a408:	f800283a 	ret

0000a40c <alt_find_file>:
 * either '/' or '\0' is the prefix of the filename. For example the filename:
 * "/myfilesystem/junk.txt" would match: "/myfilesystem", but not: "/myfile". 
 */
 
alt_dev* alt_find_file (const char* name)
{
    a40c:	defffb04 	addi	sp,sp,-20
    a410:	dfc00415 	stw	ra,16(sp)
    a414:	df000315 	stw	fp,12(sp)
    a418:	df000304 	addi	fp,sp,12
    a41c:	e13fff15 	stw	r4,-4(fp)
  alt_dev* next = (alt_dev*) alt_fs_list.next;   
    a420:	d0a00217 	ldw	r2,-32760(gp)
    a424:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    a428:	00003106 	br	a4f0 <alt_find_file+0xe4>
  {
    len = strlen(next->name);
    a42c:	e0bffd17 	ldw	r2,-12(fp)
    a430:	10800217 	ldw	r2,8(r2)
    a434:	1009883a 	mov	r4,r2
    a438:	00087280 	call	8728 <strlen>
    a43c:	e0bffe15 	stw	r2,-8(fp)
    
    if (next->name[len-1] == '/')
    a440:	e0bffd17 	ldw	r2,-12(fp)
    a444:	10c00217 	ldw	r3,8(r2)
    a448:	e0bffe17 	ldw	r2,-8(fp)
    a44c:	10bfffc4 	addi	r2,r2,-1
    a450:	1885883a 	add	r2,r3,r2
    a454:	10800003 	ldbu	r2,0(r2)
    a458:	10803fcc 	andi	r2,r2,255
    a45c:	1080201c 	xori	r2,r2,128
    a460:	10bfe004 	addi	r2,r2,-128
    a464:	10800bd8 	cmpnei	r2,r2,47
    a468:	1000031e 	bne	r2,zero,a478 <alt_find_file+0x6c>
    {
      len -= 1;
    a46c:	e0bffe17 	ldw	r2,-8(fp)
    a470:	10bfffc4 	addi	r2,r2,-1
    a474:	e0bffe15 	stw	r2,-8(fp)
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    a478:	e0bffe17 	ldw	r2,-8(fp)
    a47c:	e0ffff17 	ldw	r3,-4(fp)
    a480:	1885883a 	add	r2,r3,r2
    a484:	10800003 	ldbu	r2,0(r2)
    a488:	10803fcc 	andi	r2,r2,255
    a48c:	1080201c 	xori	r2,r2,128
    a490:	10bfe004 	addi	r2,r2,-128
    a494:	10800be0 	cmpeqi	r2,r2,47
    a498:	1000081e 	bne	r2,zero,a4bc <alt_find_file+0xb0>
    a49c:	e0bffe17 	ldw	r2,-8(fp)
    a4a0:	e0ffff17 	ldw	r3,-4(fp)
    a4a4:	1885883a 	add	r2,r3,r2
    a4a8:	10800003 	ldbu	r2,0(r2)
    a4ac:	10803fcc 	andi	r2,r2,255
    a4b0:	1080201c 	xori	r2,r2,128
    a4b4:	10bfe004 	addi	r2,r2,-128
    a4b8:	10000a1e 	bne	r2,zero,a4e4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    a4bc:	e0bffd17 	ldw	r2,-12(fp)
    a4c0:	10800217 	ldw	r2,8(r2)
    a4c4:	e0fffe17 	ldw	r3,-8(fp)
    a4c8:	180d883a 	mov	r6,r3
    a4cc:	e17fff17 	ldw	r5,-4(fp)
    a4d0:	1009883a 	mov	r4,r2
    a4d4:	000a7180 	call	a718 <memcmp>
    if (next->name[len-1] == '/')
    {
      len -= 1;
    }

    if (((name[len] == '/') || (name[len] == '\0')) && 
    a4d8:	1000021e 	bne	r2,zero,a4e4 <alt_find_file+0xd8>
        !memcmp (next->name, name, len))
    {
      /* match found */

      return next;
    a4dc:	e0bffd17 	ldw	r2,-12(fp)
    a4e0:	00000706 	br	a500 <alt_find_file+0xf4>
    }
    next = (alt_dev*) next->llist.next;
    a4e4:	e0bffd17 	ldw	r2,-12(fp)
    a4e8:	10800017 	ldw	r2,0(r2)
    a4ec:	e0bffd15 	stw	r2,-12(fp)
  /*
   * Check each list entry in turn, until a match is found, or we reach the
   * end of the list (i.e. next winds up pointing back to the list head).
   */ 
 
  while (next != (alt_dev*) &alt_fs_list)
    a4f0:	e0fffd17 	ldw	r3,-12(fp)
    a4f4:	d0a00204 	addi	r2,gp,-32760
    a4f8:	18bfcc1e 	bne	r3,r2,a42c <_gp+0xffff7654>
    next = (alt_dev*) next->llist.next;
  }
  
  /* No match found */
  
  return NULL;     
    a4fc:	0005883a 	mov	r2,zero
}
    a500:	e037883a 	mov	sp,fp
    a504:	dfc00117 	ldw	ra,4(sp)
    a508:	df000017 	ldw	fp,0(sp)
    a50c:	dec00204 	addi	sp,sp,8
    a510:	f800283a 	ret

0000a514 <alt_get_fd>:
 * the offset of the file descriptor within the file descriptor array). A
 * negative value indicates failure.
 */

int alt_get_fd (alt_dev* dev)
{
    a514:	defffc04 	addi	sp,sp,-16
    a518:	df000315 	stw	fp,12(sp)
    a51c:	df000304 	addi	fp,sp,12
    a520:	e13fff15 	stw	r4,-4(fp)
  alt_32 i;
  int rc = -EMFILE;
    a524:	00bffa04 	movi	r2,-24
    a528:	e0bffe15 	stw	r2,-8(fp)
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    a52c:	e03ffd15 	stw	zero,-12(fp)
    a530:	00001906 	br	a598 <alt_get_fd+0x84>
  {
    if (!alt_fd_list[i].dev)
    a534:	00800074 	movhi	r2,1
    a538:	10ab1604 	addi	r2,r2,-21416
    a53c:	e0fffd17 	ldw	r3,-12(fp)
    a540:	18c00324 	muli	r3,r3,12
    a544:	10c5883a 	add	r2,r2,r3
    a548:	10800017 	ldw	r2,0(r2)
    a54c:	10000f1e 	bne	r2,zero,a58c <alt_get_fd+0x78>
    {
      alt_fd_list[i].dev = dev;
    a550:	00800074 	movhi	r2,1
    a554:	10ab1604 	addi	r2,r2,-21416
    a558:	e0fffd17 	ldw	r3,-12(fp)
    a55c:	18c00324 	muli	r3,r3,12
    a560:	10c5883a 	add	r2,r2,r3
    a564:	e0ffff17 	ldw	r3,-4(fp)
    a568:	10c00015 	stw	r3,0(r2)
      if (i > alt_max_fd)
    a56c:	d0e00617 	ldw	r3,-32744(gp)
    a570:	e0bffd17 	ldw	r2,-12(fp)
    a574:	1880020e 	bge	r3,r2,a580 <alt_get_fd+0x6c>
      {
        alt_max_fd = i;
    a578:	e0bffd17 	ldw	r2,-12(fp)
    a57c:	d0a00615 	stw	r2,-32744(gp)
      }
      rc = i;
    a580:	e0bffd17 	ldw	r2,-12(fp)
    a584:	e0bffe15 	stw	r2,-8(fp)
      goto alt_get_fd_exit;
    a588:	00000606 	br	a5a4 <alt_get_fd+0x90>
   * indicates the highest file descriptor ever allocated. This is used to
   * improve efficency when searching the file descriptor list, and 
   * therefore reduce contention on the alt_fd_list_lock semaphore. 
   */

  for (i = 0; i < ALT_MAX_FD; i++)
    a58c:	e0bffd17 	ldw	r2,-12(fp)
    a590:	10800044 	addi	r2,r2,1
    a594:	e0bffd15 	stw	r2,-12(fp)
    a598:	e0bffd17 	ldw	r2,-12(fp)
    a59c:	10800810 	cmplti	r2,r2,32
    a5a0:	103fe41e 	bne	r2,zero,a534 <_gp+0xffff775c>
   * file descriptor pool.
   */

  ALT_SEM_POST(alt_fd_list_lock);

  return rc;
    a5a4:	e0bffe17 	ldw	r2,-8(fp)
}
    a5a8:	e037883a 	mov	sp,fp
    a5ac:	df000017 	ldw	fp,0(sp)
    a5b0:	dec00104 	addi	sp,sp,4
    a5b4:	f800283a 	ret

0000a5b8 <alt_icache_flush>:
 * alt_icache_flush() is called to flush the instruction cache for a memory
 * region of length "len" bytes, starting at address "start".
 */

void alt_icache_flush (void* start, alt_u32 len)
{
    a5b8:	defffb04 	addi	sp,sp,-20
    a5bc:	df000415 	stw	fp,16(sp)
    a5c0:	df000404 	addi	fp,sp,16
    a5c4:	e13ffe15 	stw	r4,-8(fp)
    a5c8:	e17fff15 	stw	r5,-4(fp)

  /*
   * This is the most we would ever need to flush.
   */
 
  if (len > NIOS2_ICACHE_SIZE)
    a5cc:	e0bfff17 	ldw	r2,-4(fp)
    a5d0:	10840070 	cmpltui	r2,r2,4097
    a5d4:	1000021e 	bne	r2,zero,a5e0 <alt_icache_flush+0x28>
  {
    len = NIOS2_ICACHE_SIZE;
    a5d8:	00840004 	movi	r2,4096
    a5dc:	e0bfff15 	stw	r2,-4(fp)
  }

  end = ((char*) start) + len;
    a5e0:	e0fffe17 	ldw	r3,-8(fp)
    a5e4:	e0bfff17 	ldw	r2,-4(fp)
    a5e8:	1885883a 	add	r2,r3,r2
    a5ec:	e0bffd15 	stw	r2,-12(fp)

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    a5f0:	e0bffe17 	ldw	r2,-8(fp)
    a5f4:	e0bffc15 	stw	r2,-16(fp)
    a5f8:	00000506 	br	a610 <alt_icache_flush+0x58>
  { 
    __asm__ volatile ("flushi %0" :: "r" (i)); 
    a5fc:	e0bffc17 	ldw	r2,-16(fp)
    a600:	1000603a 	flushi	r2
    len = NIOS2_ICACHE_SIZE;
  }

  end = ((char*) start) + len;

  for (i = start; i < end; i+= NIOS2_ICACHE_LINE_SIZE)
    a604:	e0bffc17 	ldw	r2,-16(fp)
    a608:	10800804 	addi	r2,r2,32
    a60c:	e0bffc15 	stw	r2,-16(fp)
    a610:	e0fffc17 	ldw	r3,-16(fp)
    a614:	e0bffd17 	ldw	r2,-12(fp)
    a618:	18bff836 	bltu	r3,r2,a5fc <_gp+0xffff7824>
   * For an unaligned flush request, we've got one more line left.
   * Note that this is dependent on NIOS2_ICACHE_LINE_SIZE to be a 
   * multiple of 2 (which it always is).
   */

  if (((alt_u32) start) & (NIOS2_ICACHE_LINE_SIZE - 1))
    a61c:	e0bffe17 	ldw	r2,-8(fp)
    a620:	108007cc 	andi	r2,r2,31
    a624:	10000226 	beq	r2,zero,a630 <alt_icache_flush+0x78>
  {
    __asm__ volatile ("flushi %0" :: "r" (i));
    a628:	e0bffc17 	ldw	r2,-16(fp)
    a62c:	1000603a 	flushi	r2
  /* 
   * Having flushed the cache, flush any stale instructions in the 
   * pipeline 
   */

  __asm__ volatile ("flushp");
    a630:	0000203a 	flushp

#endif /* NIOS2_ICACHE_SIZE > 0 */
}
    a634:	0001883a 	nop
    a638:	e037883a 	mov	sp,fp
    a63c:	df000017 	ldw	fp,0(sp)
    a640:	dec00104 	addi	sp,sp,4
    a644:	f800283a 	ret

0000a648 <alt_exception_cause_generated_bad_addr>:
 * Return: 1: BADADDR (bad_addr argument to handler) is valid
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
    a648:	defffe04 	addi	sp,sp,-8
    a64c:	df000115 	stw	fp,4(sp)
    a650:	df000104 	addi	fp,sp,4
    a654:	e13fff15 	stw	r4,-4(fp)
  switch (cause) {
    a658:	e0bfff17 	ldw	r2,-4(fp)
    a65c:	10bffe84 	addi	r2,r2,-6
    a660:	10c00428 	cmpgeui	r3,r2,16
    a664:	18001a1e 	bne	r3,zero,a6d0 <alt_exception_cause_generated_bad_addr+0x88>
    a668:	100690ba 	slli	r3,r2,2
    a66c:	00800074 	movhi	r2,1
    a670:	10a9a004 	addi	r2,r2,-22912
    a674:	1885883a 	add	r2,r3,r2
    a678:	10800017 	ldw	r2,0(r2)
    a67c:	1000683a 	jmp	r2
    a680:	0000a6c0 	call	a6c <__alt_mem_onchip_memory2_0-0x7594>
    a684:	0000a6c0 	call	a6c <__alt_mem_onchip_memory2_0-0x7594>
    a688:	0000a6d0 	cmplti	zero,zero,667
    a68c:	0000a6d0 	cmplti	zero,zero,667
    a690:	0000a6d0 	cmplti	zero,zero,667
    a694:	0000a6c0 	call	a6c <__alt_mem_onchip_memory2_0-0x7594>
    a698:	0000a6c8 	cmpgei	zero,zero,667
    a69c:	0000a6d0 	cmplti	zero,zero,667
    a6a0:	0000a6c0 	call	a6c <__alt_mem_onchip_memory2_0-0x7594>
    a6a4:	0000a6c0 	call	a6c <__alt_mem_onchip_memory2_0-0x7594>
    a6a8:	0000a6d0 	cmplti	zero,zero,667
    a6ac:	0000a6c0 	call	a6c <__alt_mem_onchip_memory2_0-0x7594>
    a6b0:	0000a6c8 	cmpgei	zero,zero,667
    a6b4:	0000a6d0 	cmplti	zero,zero,667
    a6b8:	0000a6d0 	cmplti	zero,zero,667
    a6bc:	0000a6c0 	call	a6c <__alt_mem_onchip_memory2_0-0x7594>
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    a6c0:	00800044 	movi	r2,1
    a6c4:	00000306 	br	a6d4 <alt_exception_cause_generated_bad_addr+0x8c>

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    a6c8:	0005883a 	mov	r2,zero
    a6cc:	00000106 	br	a6d4 <alt_exception_cause_generated_bad_addr+0x8c>

  default:
    return 0;
    a6d0:	0005883a 	mov	r2,zero
  }
}
    a6d4:	e037883a 	mov	sp,fp
    a6d8:	df000017 	ldw	fp,0(sp)
    a6dc:	dec00104 	addi	sp,sp,4
    a6e0:	f800283a 	ret

0000a6e4 <atexit>:
    a6e4:	200b883a 	mov	r5,r4
    a6e8:	000f883a 	mov	r7,zero
    a6ec:	000d883a 	mov	r6,zero
    a6f0:	0009883a 	mov	r4,zero
    a6f4:	000a7481 	jmpi	a748 <__register_exitproc>

0000a6f8 <exit>:
    a6f8:	defffe04 	addi	sp,sp,-8
    a6fc:	000b883a 	mov	r5,zero
    a700:	dc000015 	stw	r16,0(sp)
    a704:	dfc00115 	stw	ra,4(sp)
    a708:	2021883a 	mov	r16,r4
    a70c:	000a8a00 	call	a8a0 <__call_exitprocs>
    a710:	8009883a 	mov	r4,r16
    a714:	000aa300 	call	aa30 <_exit>

0000a718 <memcmp>:
    a718:	218d883a 	add	r6,r4,r6
    a71c:	21800826 	beq	r4,r6,a740 <memcmp+0x28>
    a720:	20800003 	ldbu	r2,0(r4)
    a724:	28c00003 	ldbu	r3,0(r5)
    a728:	10c00226 	beq	r2,r3,a734 <memcmp+0x1c>
    a72c:	10c5c83a 	sub	r2,r2,r3
    a730:	f800283a 	ret
    a734:	21000044 	addi	r4,r4,1
    a738:	29400044 	addi	r5,r5,1
    a73c:	003ff706 	br	a71c <_gp+0xffff7944>
    a740:	0005883a 	mov	r2,zero
    a744:	f800283a 	ret

0000a748 <__register_exitproc>:
    a748:	00800074 	movhi	r2,1
    a74c:	10ab7604 	addi	r2,r2,-21032
    a750:	10c00017 	ldw	r3,0(r2)
    a754:	defff904 	addi	sp,sp,-28
    a758:	dc000015 	stw	r16,0(sp)
    a75c:	1c000c17 	ldw	r16,48(r3)
    a760:	dd400515 	stw	r21,20(sp)
    a764:	dd000415 	stw	r20,16(sp)
    a768:	dcc00315 	stw	r19,12(sp)
    a76c:	dc800215 	stw	r18,8(sp)
    a770:	dc400115 	stw	r17,4(sp)
    a774:	dfc00615 	stw	ra,24(sp)
    a778:	202b883a 	mov	r21,r4
    a77c:	2823883a 	mov	r17,r5
    a780:	3027883a 	mov	r19,r6
    a784:	3825883a 	mov	r18,r7
    a788:	1029883a 	mov	r20,r2
    a78c:	8000021e 	bne	r16,zero,a798 <__register_exitproc+0x50>
    a790:	1c000d04 	addi	r16,r3,52
    a794:	1c000c15 	stw	r16,48(r3)
    a798:	80800117 	ldw	r2,4(r16)
    a79c:	00c007c4 	movi	r3,31
    a7a0:	1880110e 	bge	r3,r2,a7e8 <__register_exitproc+0xa0>
    a7a4:	00800034 	movhi	r2,0
    a7a8:	10800004 	addi	r2,r2,0
    a7ac:	1000021e 	bne	r2,zero,a7b8 <__register_exitproc+0x70>
    a7b0:	00bfffc4 	movi	r2,-1
    a7b4:	00003106 	br	a87c <__register_exitproc+0x134>
    a7b8:	01002304 	movi	r4,140
    a7bc:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    a7c0:	1021883a 	mov	r16,r2
    a7c4:	103ffa26 	beq	r2,zero,a7b0 <_gp+0xffff79d8>
    a7c8:	10000115 	stw	zero,4(r2)
    a7cc:	a0800017 	ldw	r2,0(r20)
    a7d0:	10c00c17 	ldw	r3,48(r2)
    a7d4:	80c00015 	stw	r3,0(r16)
    a7d8:	14000c15 	stw	r16,48(r2)
    a7dc:	80002215 	stw	zero,136(r16)
    a7e0:	a8001d26 	beq	r21,zero,a858 <__register_exitproc+0x110>
    a7e4:	00000606 	br	a800 <__register_exitproc+0xb8>
    a7e8:	a8001b26 	beq	r21,zero,a858 <__register_exitproc+0x110>
    a7ec:	80802217 	ldw	r2,136(r16)
    a7f0:	1000091e 	bne	r2,zero,a818 <__register_exitproc+0xd0>
    a7f4:	00800034 	movhi	r2,0
    a7f8:	10800004 	addi	r2,r2,0
    a7fc:	103fec26 	beq	r2,zero,a7b0 <_gp+0xffff79d8>
    a800:	01004204 	movi	r4,264
    a804:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    a808:	103fe926 	beq	r2,zero,a7b0 <_gp+0xffff79d8>
    a80c:	10004015 	stw	zero,256(r2)
    a810:	10004115 	stw	zero,260(r2)
    a814:	80802215 	stw	r2,136(r16)
    a818:	81400117 	ldw	r5,4(r16)
    a81c:	01000044 	movi	r4,1
    a820:	2947883a 	add	r3,r5,r5
    a824:	18c7883a 	add	r3,r3,r3
    a828:	10c7883a 	add	r3,r2,r3
    a82c:	1cc00015 	stw	r19,0(r3)
    a830:	2148983a 	sll	r4,r4,r5
    a834:	11404017 	ldw	r5,256(r2)
    a838:	290ab03a 	or	r5,r5,r4
    a83c:	11404015 	stw	r5,256(r2)
    a840:	1c802015 	stw	r18,128(r3)
    a844:	00c00084 	movi	r3,2
    a848:	a8c0031e 	bne	r21,r3,a858 <__register_exitproc+0x110>
    a84c:	10c04117 	ldw	r3,260(r2)
    a850:	1908b03a 	or	r4,r3,r4
    a854:	11004115 	stw	r4,260(r2)
    a858:	80800117 	ldw	r2,4(r16)
    a85c:	10c00044 	addi	r3,r2,1
    a860:	10800084 	addi	r2,r2,2
    a864:	1085883a 	add	r2,r2,r2
    a868:	1085883a 	add	r2,r2,r2
    a86c:	80c00115 	stw	r3,4(r16)
    a870:	80a1883a 	add	r16,r16,r2
    a874:	84400015 	stw	r17,0(r16)
    a878:	0005883a 	mov	r2,zero
    a87c:	dfc00617 	ldw	ra,24(sp)
    a880:	dd400517 	ldw	r21,20(sp)
    a884:	dd000417 	ldw	r20,16(sp)
    a888:	dcc00317 	ldw	r19,12(sp)
    a88c:	dc800217 	ldw	r18,8(sp)
    a890:	dc400117 	ldw	r17,4(sp)
    a894:	dc000017 	ldw	r16,0(sp)
    a898:	dec00704 	addi	sp,sp,28
    a89c:	f800283a 	ret

0000a8a0 <__call_exitprocs>:
    a8a0:	defff504 	addi	sp,sp,-44
    a8a4:	dd000515 	stw	r20,20(sp)
    a8a8:	05000074 	movhi	r20,1
    a8ac:	dc800315 	stw	r18,12(sp)
    a8b0:	dfc00a15 	stw	ra,40(sp)
    a8b4:	df000915 	stw	fp,36(sp)
    a8b8:	ddc00815 	stw	r23,32(sp)
    a8bc:	dd800715 	stw	r22,28(sp)
    a8c0:	dd400615 	stw	r21,24(sp)
    a8c4:	dcc00415 	stw	r19,16(sp)
    a8c8:	dc400215 	stw	r17,8(sp)
    a8cc:	dc000115 	stw	r16,4(sp)
    a8d0:	d9000015 	stw	r4,0(sp)
    a8d4:	2825883a 	mov	r18,r5
    a8d8:	a52b7604 	addi	r20,r20,-21032
    a8dc:	a4400017 	ldw	r17,0(r20)
    a8e0:	8cc00c17 	ldw	r19,48(r17)
    a8e4:	8c400c04 	addi	r17,r17,48
    a8e8:	98004526 	beq	r19,zero,aa00 <__call_exitprocs+0x160>
    a8ec:	9c000117 	ldw	r16,4(r19)
    a8f0:	00900034 	movhi	r2,16384
    a8f4:	10bfffc4 	addi	r2,r2,-1
    a8f8:	9d402217 	ldw	r21,136(r19)
    a8fc:	85bfffc4 	addi	r22,r16,-1
    a900:	80a1883a 	add	r16,r16,r2
    a904:	8421883a 	add	r16,r16,r16
    a908:	8421883a 	add	r16,r16,r16
    a90c:	ac2f883a 	add	r23,r21,r16
    a910:	84000204 	addi	r16,r16,8
    a914:	9c21883a 	add	r16,r19,r16
    a918:	b0002716 	blt	r22,zero,a9b8 <__call_exitprocs+0x118>
    a91c:	90000726 	beq	r18,zero,a93c <__call_exitprocs+0x9c>
    a920:	a800041e 	bne	r21,zero,a934 <__call_exitprocs+0x94>
    a924:	b5bfffc4 	addi	r22,r22,-1
    a928:	bdffff04 	addi	r23,r23,-4
    a92c:	843fff04 	addi	r16,r16,-4
    a930:	003ff906 	br	a918 <_gp+0xffff7b40>
    a934:	b9002017 	ldw	r4,128(r23)
    a938:	913ffa1e 	bne	r18,r4,a924 <_gp+0xffff7b4c>
    a93c:	99000117 	ldw	r4,4(r19)
    a940:	82000017 	ldw	r8,0(r16)
    a944:	213fffc4 	addi	r4,r4,-1
    a948:	b100021e 	bne	r22,r4,a954 <__call_exitprocs+0xb4>
    a94c:	9d800115 	stw	r22,4(r19)
    a950:	00000106 	br	a958 <__call_exitprocs+0xb8>
    a954:	80000015 	stw	zero,0(r16)
    a958:	403ff226 	beq	r8,zero,a924 <_gp+0xffff7b4c>
    a95c:	9f000117 	ldw	fp,4(r19)
    a960:	a8000526 	beq	r21,zero,a978 <__call_exitprocs+0xd8>
    a964:	00800044 	movi	r2,1
    a968:	1592983a 	sll	r9,r2,r22
    a96c:	a9404017 	ldw	r5,256(r21)
    a970:	494a703a 	and	r5,r9,r5
    a974:	2800021e 	bne	r5,zero,a980 <__call_exitprocs+0xe0>
    a978:	403ee83a 	callr	r8
    a97c:	00000906 	br	a9a4 <__call_exitprocs+0x104>
    a980:	a9004117 	ldw	r4,260(r21)
    a984:	4908703a 	and	r4,r9,r4
    a988:	2000041e 	bne	r4,zero,a99c <__call_exitprocs+0xfc>
    a98c:	b9400017 	ldw	r5,0(r23)
    a990:	d9000017 	ldw	r4,0(sp)
    a994:	403ee83a 	callr	r8
    a998:	00000206 	br	a9a4 <__call_exitprocs+0x104>
    a99c:	b9000017 	ldw	r4,0(r23)
    a9a0:	403ee83a 	callr	r8
    a9a4:	99000117 	ldw	r4,4(r19)
    a9a8:	e13fcc1e 	bne	fp,r4,a8dc <_gp+0xffff7b04>
    a9ac:	89000017 	ldw	r4,0(r17)
    a9b0:	993fdc26 	beq	r19,r4,a924 <_gp+0xffff7b4c>
    a9b4:	003fc906 	br	a8dc <_gp+0xffff7b04>
    a9b8:	00800034 	movhi	r2,0
    a9bc:	10800004 	addi	r2,r2,0
    a9c0:	10000f26 	beq	r2,zero,aa00 <__call_exitprocs+0x160>
    a9c4:	99400117 	ldw	r5,4(r19)
    a9c8:	99000017 	ldw	r4,0(r19)
    a9cc:	2800091e 	bne	r5,zero,a9f4 <__call_exitprocs+0x154>
    a9d0:	20000826 	beq	r4,zero,a9f4 <__call_exitprocs+0x154>
    a9d4:	89000015 	stw	r4,0(r17)
    a9d8:	a8000226 	beq	r21,zero,a9e4 <__call_exitprocs+0x144>
    a9dc:	a809883a 	mov	r4,r21
    a9e0:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    a9e4:	9809883a 	mov	r4,r19
    a9e8:	00000000 	call	0 <__alt_mem_onchip_memory2_0-0x8000>
    a9ec:	8cc00017 	ldw	r19,0(r17)
    a9f0:	003fbd06 	br	a8e8 <_gp+0xffff7b10>
    a9f4:	9823883a 	mov	r17,r19
    a9f8:	2027883a 	mov	r19,r4
    a9fc:	003fba06 	br	a8e8 <_gp+0xffff7b10>
    aa00:	dfc00a17 	ldw	ra,40(sp)
    aa04:	df000917 	ldw	fp,36(sp)
    aa08:	ddc00817 	ldw	r23,32(sp)
    aa0c:	dd800717 	ldw	r22,28(sp)
    aa10:	dd400617 	ldw	r21,24(sp)
    aa14:	dd000517 	ldw	r20,20(sp)
    aa18:	dcc00417 	ldw	r19,16(sp)
    aa1c:	dc800317 	ldw	r18,12(sp)
    aa20:	dc400217 	ldw	r17,8(sp)
    aa24:	dc000117 	ldw	r16,4(sp)
    aa28:	dec00b04 	addi	sp,sp,44
    aa2c:	f800283a 	ret

0000aa30 <_exit>:
 *
 * ALT_EXIT is mapped onto the _exit() system call in alt_syscall.h
 */

void ALT_EXIT (int exit_code)
{
    aa30:	defffd04 	addi	sp,sp,-12
    aa34:	df000215 	stw	fp,8(sp)
    aa38:	df000204 	addi	fp,sp,8
    aa3c:	e13fff15 	stw	r4,-4(fp)
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Entering _exit() function.\r\n");
  ALT_LOG_PRINT_BOOT("[alt_exit.c] Exit code from main was %d.\r\n",exit_code);
  /* Stop all other threads */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Calling ALT_OS_STOP().\r\n");
  ALT_OS_STOP();
    aa40:	0001883a 	nop
    aa44:	e0bfff17 	ldw	r2,-4(fp)
    aa48:	e0bffe15 	stw	r2,-8(fp)
/*
 * Routine called on exit.
 */
static ALT_INLINE ALT_ALWAYS_INLINE void alt_sim_halt(int exit_code)
{
  register int r2 asm ("r2") = exit_code;
    aa4c:	e0bffe17 	ldw	r2,-8(fp)
  __asm__ volatile ("\n0:\n\taddi %0,%0, -1\n\tbgt %0,zero,0b" : : "r" (ALT_CPU_FREQ/100) ); /* Delay for >30ms */

  __asm__ volatile ("break 2" : : "r"(r2), "r"(r3) ALT_GMON_DATA );

#else /* !DEBUG_STUB */
  if (r2) {
    aa50:	10000226 	beq	r2,zero,aa5c <_exit+0x2c>
    ALT_SIM_FAIL();
    aa54:	002af070 	cmpltui	zero,zero,43969
    aa58:	00000106 	br	aa60 <_exit+0x30>
  } else {
    ALT_SIM_PASS();
    aa5c:	002af0b0 	cmpltui	zero,zero,43970
  ALT_SIM_HALT(exit_code);

  /* spin forever, since there's no where to go back to */

  ALT_LOG_PRINT_BOOT("[alt_exit.c] Spinning forever.\r\n");
  while (1);
    aa60:	003fff06 	br	aa60 <_gp+0xffff7c88>
